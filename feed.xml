<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://pullrequest.ir/feed.xml" rel="self" type="application/atom+xml" /><link href="http://pullrequest.ir/" rel="alternate" type="text/html" /><updated>2018-07-30T18:28:38+00:00</updated><id>http://pullrequest.ir/</id><title type="html">پول ریکوئست</title><subtitle>پول ریکوئست، دست نوشته های فنی فارسی زبان</subtitle><entry><title type="html">داکر، داکر کامپز، کانتینرها و اتوماسیون</title><link href="http://pullrequest.ir/%D8%AF%D8%A7%DA%A9%D8%B1-%DA%A9%D8%A7%D9%86%D8%AA%DB%8C%D9%86%D8%B1-%D9%88-%D8%A7%D8%AA%D9%88%D9%85%D8%A7%D8%B3%DB%8C%D9%88%D9%86/" rel="alternate" type="text/html" title="داکر، داکر کامپز، کانتینرها و اتوماسیون" /><published>2018-07-22T00:00:00+00:00</published><updated>2018-07-22T00:00:00+00:00</updated><id>http://pullrequest.ir/%D8%AF%D8%A7%DA%A9%D8%B1-%DA%A9%D8%A7%D9%86%D8%AA%DB%8C%D9%86%D8%B1-%D9%88-%D8%A7%D8%AA%D9%88%D9%85%D8%A7%D8%B3%DB%8C%D9%88%D9%86</id><content type="html" xml:base="http://pullrequest.ir/%D8%AF%D8%A7%DA%A9%D8%B1-%DA%A9%D8%A7%D9%86%D8%AA%DB%8C%D9%86%D8%B1-%D9%88-%D8%A7%D8%AA%D9%88%D9%85%D8%A7%D8%B3%DB%8C%D9%88%D9%86/">&lt;p&gt;داکر چی هست؟ داکر کامپز چیکار میکنه و چجوری میتونیم پروژمون رو اتوماسیون کنیم؟&lt;/p&gt;

&lt;h1 id=&quot;داکر-کانتینر-و-اتوماسیون&quot;&gt;داکر، کانتینر و اتوماسیون&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://files.virgool.io/upload/users/3181/posts/b1mi525hzvoe/1p7yoldghfgz.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;مقدمه&quot;&gt;مقدمه&lt;/h1&gt;

&lt;p&gt;بالاخره بعد از یه مدت طولانی که از داون شدن سایتم میگذره، تونستم دوباره وصلش کنم و کانفیگای سمت سرور رو دوباره فیکس کنم. شاید جالب باشه ولی سرور من جای خلوتیه و چیز زیادی توش نیست و وب‌سایت خودم تنها برنامه‌ایه که توش اجرا میشه، اما نکته‌ی جالب اینه که موقع دیپلوی باهاش خیلی مشکل دارم. بگذریم، همین مشکلات باعث شد که به نوشتن این مطلب فکر کنم و تا جایی که میتونم در مورد داکر توضیح بدم.&lt;/p&gt;

&lt;p&gt;خواهش من مثل همیشه، انه که ان مطلب رو بخونید، ازش لذت ببرید و برای دوستاتون هم بفرستید و اگر جایی اشکالی دیدید، بهم خبر بدید. ضمنا، حقوق نویسنده رو هم فراموش نکنید و اگر جایی از این مطلب استفاده میکنید، اسم نویسنده اصلی (من، آیین) رو توش درج کنید.&lt;/p&gt;

&lt;p&gt;سپاس&lt;/p&gt;

&lt;h1 id=&quot;داکر-docker-چی-هست&quot;&gt;داکر (Docker) چی هست؟&lt;/h1&gt;

&lt;p&gt;اول از همه، داکر اسم شرکتی هست که واژه کانتِینِر یا Container رو روانه‌ی دنیای آی‌تی کرده. البته که قبلا هم از این واژه استفاده‌های گسترده‌ای میشده، اما داکر باعث شده که واژه کانتِینِر معنی مشخص‌تر و دقیق‌تری پیدا کنه.&lt;/p&gt;

&lt;p&gt;خود نرم‌افزار داکر، یه سرویس برای مدیریت کانتینرها یا Container Service Manager هست. کلیدواژه‌هایی که میشه برای داکر استفاده کرد، &lt;strong&gt;توسعه‌دادن، دیپلوی کردن و اجرا کردن&lt;/strong&gt; هستن. در واقع داکر هدفش اینه که وقتی برنامه‌نویس‌ها، نرم‌افزاری رو می‌نویسن، اون رو به کانتینرها منتقل و به سادگی اون رو هر جایی اجرا کنن.&lt;/p&gt;

&lt;h2 id=&quot;پلتفرم-سَکو-کانتینر-چی-هست&quot;&gt;پلتفرم (سَکو؟!) کانتینر چی هست؟&lt;/h2&gt;

&lt;p&gt;پلتفرم کانتینر یا Container Platform یه سرویس کامل برای سازمان‌ها و شرکت‌هاست که بتونن باهاش مشکلات مختلفی رو حل کنن. مهمترین ویژگی کانتینرها اینه که تمام نرم‌افزارهایی که برنامه لازم داره رو، توی خودشون نگه‌میدارن. اما یکم در مورد کانتینرها عمیق بشم…&lt;/p&gt;

&lt;p&gt;کانتینر یه پراسِس (Process) داکر هست که فقط روی لینوکس یا ویندوز اجرا میشه (ظاهرا برای مک هم هست ولی من جایی ندیدم) و داخل خودش هرچیزی که برای اجرا شدن نیاز داشته‌باشه رو داره. در واقع یه کانتینر &lt;strong&gt;یکمی شبیه به ماشین‌مجازی یا Virtual Machine هست&lt;/strong&gt; با این تفاوت که &lt;strong&gt;هسته‌ی سیستم‌عامل میزبان یا Host رو به اشتراک میذاره.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.virgool.io/upload/users/3181/posts/b1mi525hzvoe/nyajlhjigsvr.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;عکس بالا، اساسی‌ترین تفاوت کانتینرها با ماشین‌های مجازی رو نشون میده. چارت سمت راست کانتینر و سمت چپ، ماشین مجازی. زیر ساخت‌ها یا Infrastructures شبیه به هم، داکر از سیستم‌عامل میزبان و ماشین مجازی از Hypervisor که یه لایه هست تا برنامه‌های مورد نیاز سیستم‌عامل داخل ماشین رو فراهم کنه، استفاده میکنه. تو ماشین مجازی شما به یه سیستم‌عامل مهمان احتیاج دارید، مثلا توی سیستم‌عامل لینوکستون، ویندوز نصب میکنید، اما داکر اینطور نیست و از موتور خودش استفاده میکنه تا با سیستم‌عامل میزبان ارتباط برقرار کنه. تو ماشین مجازی شما سیستم‌عامل رو نصب میکنید که برنامه‌های لازم رو بتونید فراهم کنید. این قدم تو کانتینر از بین رفته (و دقیقا چیزیه که سرعت کانتینر رو به نسبت ماشین‌مجازی خیلی بیشتر می‌کنه). در نهایت کتابخونه‌ها و برنامه‌های لازم اجرا میشن و شما میتونید سیستمتون رو بالا بیارید.&lt;/p&gt;

&lt;p&gt;این رو اضافه میکنم، فرض کنید داکر همون نرم‌افزار Oracle VirtualBox یا VMWare هست و کانتینرها، همون سیستم‌عامل‌هایی که توشون نصب می‌کنیم.&lt;/p&gt;

&lt;h1 id=&quot;containerization-vs-virtualization&quot;&gt;Containerization vs Virtualization&lt;/h1&gt;

&lt;p&gt;قبل از اینکه وارد این مبحث بشم، یه نگاهی به ترمینولوژی داکر داشته باشیم:&lt;/p&gt;

&lt;p&gt;موتور داکر یا &lt;strong&gt;Docker Engine&lt;/strong&gt;قسمتی از داکر که وظیفه‌ی ایجاد و اجرای کانتینرها رو دارههاب داکر یا &lt;strong&gt;Docker Hub&lt;/strong&gt;سرویسی از داکر برای به اشتراک‌گذاری کانتینرها با دیگرانداکر کامپوز یا &lt;strong&gt;Docker Compose&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ابزاری که باهاش برنامه‌های چند کانتینری تعریف میکنیم. این ابزار از فایلهای Yaml استفاده میکنه تا فایل‌ها و تنظیمات رو کانفیگ کنه و کانتینر رو آماده اجرا کنه.&lt;/p&gt;

&lt;p&gt;در کل استفاده از این ابزار سه مرحله داره:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;محیط برنامه رو با یه Dockerfile تعریف میکنیم تا همه‌جا بشه ازش استفاده کرد.&lt;/li&gt;
  &lt;li&gt;سرویس‌هایی که لازم هست برای اجرای این کانتینر رو تو فایل docker-compose.yml میذاریم تا با فایل Dockerfile یه جا اجرا بشن.&lt;/li&gt;
  &lt;li&gt;دستور docker-compuse up رو اجرا میکنیم و تموم میشه!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;داکر ایمِج یا &lt;strong&gt;Docker Image&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;تو داکر، همه‌چیز بر اساس ایمِج‌ها ساخته شده!&lt;/p&gt;

&lt;p&gt;داکر فایل یا &lt;strong&gt;Docker file&lt;/strong&gt;دستوراتی که برای ساخت ایمِج لازم هست اینجا تعریف میشه.&lt;/p&gt;

&lt;h2 id=&quot;حالا-کانتِینِریزِیشن-در-مقابل-ویرچوالیزِیشن-یا-مجازیسازی-چی-هست&quot;&gt;حالا کانتِینِریزِیشن در مقابل ویرچوالیزِیشن یا مجازی‌سازی چی هست؟&lt;/h2&gt;

&lt;p&gt;هرچه‌قدر که زمان میگذره، تکنولوژی داکر بین حرفه‌ای‌های IT محبوبیت بیشتری پیدا می‌کنه، که باعث میشه برای برنامه‌نویس‌ها دونستن حداقل مبانی کانتینر‌ها به یک «باید» تبدیل بشه.&lt;/p&gt;

&lt;p&gt;صنعت IT هرروز درحال تغییر و پیشرفته و «سرعت و بهینه‌سازی» تبدیل به اساس این صنعت شدن. تکنولوژی‌ها سعی کردن روش‌های بهتری رو برای اتوماسیون ارائه بدن تا پروسه ساخت و تولید برنامه‌ها روراحتتر و سریع‌تر کنن.&lt;/p&gt;

&lt;p&gt;نمیدونم که آیا با Industry 4.0 آشنایی دارید یا نه، اما مجازی‌سازی یا ویرچوالیزیشن (Virtualization) سعی کرده تا این نسخه از صنعت IT رو بهینه‌تر و قابل‌حمل‌تر یا Portable کنه. با این‌حال، تکنولوژی مجازی‌سازی نقاط ضعف جدی رو داره، مثل کاهش محسوس پرفورمنس نرم‌افزارها که بخاطر وزن زیاد و ساختار سنگین VMها یا Virtual Machineها اتفاق میوفته. یا مثلا غیرقابل حمل بودن برنامه‌ها و کارایی پایین در مدیریت منابع سیستم و چیزهای دیگه از این دسته.&lt;/p&gt;

&lt;p&gt;اینجاست که صنعت IT رفته سراغ تکنولوژی داکر و کانتینریزیشن! دقیق‌تر میگم، موتور داکر برای کانتینریزیشن ساخته شده که مراحل &lt;strong&gt;بسته‌بندی، حمل و گسترش&lt;/strong&gt; برنامه‌ها رو بسیار ساده کرده.&lt;/p&gt;

&lt;h1 id=&quot;شکافت-هستهی-اتم&quot;&gt;شکافت هسته‌ی اتم!&lt;/h1&gt;

&lt;p&gt;برای یادگیری و راه‌اندازی داکر، نیازی نیست فیزیک کوانتوم بلد باشید یا بتونید حداقل یکی از &lt;a href=&quot;https://curiosity.com/topics/the-millennium-problems-are-seven-math-problems-worth-dollar1-million-each-curiosity/&quot;&gt;سوالای میلنیوم ریاضی&lt;/a&gt; رو حل کنید! فقط کافیه یکمی با محیط ترمینال و cli دوست باشید و یک تکست‌ادیتور هم کنار دستتون باشه، و خب قطعا داشتن یکمی دانش برنامه‌نویسی هم میتونه به کارتون بیاد!&lt;/p&gt;

&lt;h2 id=&quot;نصب-و-راهاندازی-داکر&quot;&gt;نصب و راه‌اندازی داکر&lt;/h2&gt;

&lt;p&gt;گرفتن تمام ابزارهای مورد نیازتون برای داکر میتونه کمی خسته‌کننده به نظر برسه. اما توصیه‌ی من اینه که قبل از نصب داکر، حتما &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;نرم‌افزار vscode رو دانلود کنید&lt;/a&gt; و در نهایت &lt;a href=&quot;https://www.docker.com/community-edition#/linux&quot;&gt;داکر رو برای سیستم‌عامل خودتون دریافت کنید.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;بعد از نصب داکر، دستور زیر رو اجرا کنید تا مطمئن بشیم همه‌چیز درست انجام شده:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run hello-world&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;که در پاسخش باید نتیجه‌ی زیر رو دریافت کنید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello from Docker.
This message shows that your installation appears to be working correctly.
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;بازی-با-busybox&quot;&gt;بازی با BusyBox&lt;/h2&gt;

&lt;p&gt;حالا که داکر نصب شده، بریم و یکم دستامون رو کثیف کنیم. برای اینکار یه کانتینر BusyBox (یه نرم‌افزار که یسری از ابزارهای Unix رو توی یه فایل به شما میده) رو نصب میکنیم تا طعم دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; رو بچشیم.&lt;/p&gt;

&lt;p&gt;برای شروع، دستور زیر رو اجرا کنید:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker pull busybox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;دقت داشته باشید که ممکن هست به ارور &lt;code class=&quot;highlighter-rouge&quot;&gt;permission denied&lt;/code&gt; برخورد کنید. بهترین راه اینه که خودتون رو توی گروه docker اضافه کنید تا ازش پیشگری بشه.&lt;/p&gt;

&lt;p&gt;دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt; ایمِج BusyBox رو از &lt;a href=&quot;https://hub.docker.com/explore/&quot;&gt;رجیستری داکر (Docker Registry) یا همون داکرهاب (Docker Hub)&lt;/a&gt; دریافت و اون روی روی سیستممون ذخیره میکنه. ضمنا شما میتونید دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt; رو اجرا کنید تا ببینید چه ایمِج‌هایی روی سیستمتون نصب شدن.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE
nexus.ida-analytics.de/ida/moira     latest              e3503776559a        6 days ago          387MB
nexus.ida-analytics.de/ida/grafana   latest              a1192aa71c7f        7 days ago          387MB
nexus.ida-analytics.de/ida/grafana                 6145fb02ee49        7 days ago          387MB
nexus.ida-analytics.de/ida/moira                   1323d422a434        7 days ago          387MB
busybox                              latest              8c811b4aec35        7 weeks ago         1.15MB 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;docker-run&quot;&gt;Docker Run&lt;/h2&gt;

&lt;p&gt;عالی شد! حالا وقتش شده که یه کانتینر داکر، مبتنی بر ایمِجی که گرفتیم رو اجرا کنیم. برای اینکار از دستور زیر استفاده میکنیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run busybox
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;چی شد؟! چرا هیچ اتفاقی رخ نداد؟! خب، واقعیت اینه که کلی اتفاقات اینجا افتاده که با چشم غیر مسلح قابل رویت نیست :دی. وقتی که شما دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; رو صدا میزنید، داکر ایمِجی که گفتید رو پیدا میکنه (اینجا میشه Busybox)، یه کانتینر براش میسازه و یه دستور رو توی کانتینر اجرا میکنه. اگر دقت کنید، تو دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run busybox&lt;/code&gt; ما هیچ دستور اضافی رو فراهم نکردیم. بنابراین کانتینر ساخته شده، بالا اومده، یه دستور خالی رو اجرا کرده و خارج شده.&lt;/p&gt;

&lt;p&gt;دستور بالا رو میشه اینطور هم نوشت:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run busybox echo &quot;Salam Donya!!&quot;
Salam Donya!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اینجا داکر، دستور echo رو اجرا کرده و در نهایت بسته شده. حالا فکر کنید میخواستید همه‌ی اینا رو با ماشین‌مجازی اجرا کنید! چقدر باید صبر می‌کردید؟&lt;/p&gt;

&lt;p&gt;حالا وقتش شده که دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; رو اجرا کنیم.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;از اونجایی که هیچ کانتینری در حال اجرا نیست، ما هم یه لیست خالی رو دریافت کردیم. حالا یکم دستور رو دقیق‌تر میکنیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps -a
CONTAINER ID        IMAGE                                       COMMAND                CREATED             STATUS                      PORTS               NAMES
2059d101f971        busybox                                     &quot;echo Hallo&quot;           15 minutes ago      Exited (0) 15 minutes ago                       hopeful_nightingale
45f36d883bd4        busybox                                     &quot;sh&quot;                   15 minutes ago      Exited (0) 15 minutes ago                       kind_mcnulty
375b34dfa64c        nexus.ida-analytics.de/ida/moira:latest     &quot;/bin/moira&quot;           6 days ago          Exited (137) 6 days ago                         moira
45ba50ce36f9        nexus.ida-analytics.de/ida/grafana:latest   &quot;/bin/start_grafana&quot;   6 days ago          Exited (0) 6 days ago                           grafana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;همون‌طور که مشخصه، پارامتر &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; دستور داده که لیست تمام کانتینرها، فاقد از وضعیتشون (که اینجا &lt;code class=&quot;highlighter-rouge&quot;&gt;exited&lt;/code&gt; هست) برگردونده بشه.&lt;/p&gt;

&lt;p&gt;شاید براتون سوال بشه که چطور میشه دستورات بیشتری رو توی کانتینر اجرا کرد؟ خیلی آسون. اگر با دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; آشنایی داشته باشید، میخوایم اینجا یه کاری مشابه اون رو انجام بدیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -it busybox sh
/ # ls
bin   dev   etc   home  proc  root  sys   tmp   usr   var
/ # pwd
/
/ # uptime
 22:30:58 up  3:26,  0 users,  load average: 1.54, 1.46, 1.48
/ #
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اجرا کردن دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; با پارامتر &lt;code class=&quot;highlighter-rouge&quot;&gt;-it&lt;/code&gt; باعث میشه که ما به داخل کانتینر (در واقع با ساخت یه سِشِن tty) بریم و دستوراتی که میخوایم رو اونجا اجرا کنیم.&lt;/p&gt;

&lt;p&gt;قبل از اینکه به مرحله‌ی بعدی برم، بهتون این نکته رو هم میگم که چطور میشه کانتینرها رو حذف کرد. بالاتر دیدیم که با اجرا کردن دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -a&lt;/code&gt; میتونیم لیست تمام کانتینرهامون رو بدست بیاریم. برای حذف یه کانتینر کافیه که &lt;code class=&quot;highlighter-rouge&quot;&gt;CONTAINER ID&lt;/code&gt; او کانتینر رو برداریم و بعد دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm CONTAINER_ID&lt;/code&gt; رو اجرا کنیم. که در پاسخش باید آی‌دی کانتینر دوباره به شما نمایش داده بشه.&lt;/p&gt;

&lt;p&gt;دستور زیر هم هست:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker rm $(docker ps -a -q -f status=exited)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اجرا کردن این دستور، تمام کانتینرهایی که وضعیت &lt;code class=&quot;highlighter-rouge&quot;&gt;exited&lt;/code&gt; دارن رو پاک میکنه.&lt;/p&gt;

&lt;h1 id=&quot;وباَپ-تو-داکر&quot;&gt;وب‌اَپ تو داکر&lt;/h1&gt;

&lt;p&gt;تا اینجا فهمیدیم که دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; تا حدودی چطور کار میکنه، همزمان یکمی هم با کانتینرها بازی کردیم و با ترمینولوژی داکر بیشتر آشنا شدیم. حالا وقتش شده که بریم سراغ مسائل اساسی، و ببینیم که چطور میشه یه وب‌اَپ رو تو داکر دیپلوی یا Deploy کرد.&lt;/p&gt;

&lt;h2 id=&quot;سایتهای-استاتیک&quot;&gt;سایت‌های استاتیک&lt;/h2&gt;

&lt;p&gt;بذارید قدم‌های کوچک برداریم. اولین چیزی که میریم سراغش، دیپلوی کردن یه سایت استاتیک خیلی ساده هست. یه ایمِج رو از داکر‌هاب دریافت یا pull میکنیم و اجراش میکنیم تا ببینیم چقدر راه‌اندازی سایت‌های استاتیک کار آسونیه.&lt;/p&gt;

&lt;p&gt;ایمِجی که برای اینکار استفاده میکنیم، یه ایمِج از قبل آماده شدست:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run prakhar1989/static-site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;از اونجایی که این ایمِج به صورت لوکال یا محلی تو سیستم ما نیست، داکر اون رو از رجیستری دریافت میکنه و بعد ایمِج رو اجرا میکنه. اگر همه‌چیز خوب پیش بره، شما پیام &lt;code class=&quot;highlighter-rouge&quot;&gt;Nginx is running...&lt;/code&gt; رو خواهید دید. حالا که سرور راه‌افتاده، چطور میشه بهش دسترسی داشت؟ چطوری میشه فهمید تو چه پورتی اجرا شده؟&lt;/p&gt;

&lt;p&gt;خب تو این حالت، داکر هیچ پورتی رو نمایش یا اصطلاحا اِکسپوز (Expose) نمیکنه، برای همین لازم هست که مجددا دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; رو اجرا کنیم تا پورت‌ها رو نمایش بدیم. همزمان هم باید کاری کنیم که ترمینال روی این حالت قفل نشه و ما بتونیم از ترمینال، بدون بستن سرور خارج بشیم. به این حالت میگن Detached Mode یا حالت جدا شده!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -P --name static-site prakhar1989/static-site
531b38e65151ba7ee133aff085d4c3e31d9ab349d0fed2b48b91cf28d53ca685
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;تو دستور بالا، &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; حالت detached mode رو اجرا و &lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt; پورت‌هارو باز میکنه. &lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt; هم اسمی رو برای کانتینر درنظر میگیره. حالا میتونیم پورت‌های باز شده رو پیدا کنیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker port static-site
443/tcp -&amp;gt; 0.0.0.0:32768
80/tcp -&amp;gt; 0.0.0.0:32769
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حالا، &lt;a href=&quot;http://localhost:32769/&quot;&gt;http://localhost:32769&lt;/a&gt; رو باز کنید و نتیجه رو ببینید.&lt;/p&gt;

&lt;p&gt;همچنین میتونید یه آدرس پورت دلخواه هم به ایمِجتون بدید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -p 8888:80 prakhar1989/static-site
Nginx is running...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;این دستور میگه که: به پورت ۸۸۸۸ سیستم هاست یا میزبان، هرچیزی که تو پورت ۸۰ ایمِج بود رو اختصاص بده. برای اینکه کانتینر رو متوقف کنید، دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker stop&lt;/code&gt; رو به همراه آی‌دی کانتینر اجرا کنید.&lt;/p&gt;

&lt;p&gt;مطمئن هستم که شما هم موافقید این کار واقعا آسون بود! فکر کنید شما یه سرور دارید و میخواید سایتتون رو روش راه‌اندازی کنید، کل کار اینه که داکر رو نصب کنید و دستورات بالا رو وارد کنید!&lt;/p&gt;

&lt;p&gt;ولی خب، این برای ما کافی نیست، چون ما دوست داریم بیشتر بدونیم :) برای همین باید یاد بگیریم چطور داکر ایمِج خودمون رو بسازیم…&lt;/p&gt;

&lt;h2 id=&quot;داکر-ایمِجها&quot;&gt;داکر ایمِج‌ها&lt;/h2&gt;

&lt;p&gt;ما با ایمِج‌ها تا حدودی آشنا شدیم، ولی تو این بخش میخوام عمیق‌تر شیرجه‌ بزنیم تو ایمِج‌ها و ببینیم اصلا ایمِج‌های داکر چی هستن… کاری که انجام دادیم این بود که ایمِج busybox رو از رجیستری &lt;strong&gt;دریافت یا pull کردیم،&lt;/strong&gt; و به داکر گفتیم که یه کانتینر &lt;strong&gt;مبتنی بر اون ایمِج&lt;/strong&gt; برامون بسازه. اول بیاید یه لیستی از ایمِج‌هامون رو بگیریم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images
REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE
nexus.ida-analytics.de/ida/moira     latest              e3503776559a        7 days ago          387MB
nexus.ida-analytics.de/ida/grafana   latest              a1192aa71c7f        7 days ago          387MB
nexus.ida-analytics.de/ida/grafana                 6145fb02ee49        7 days ago          387MB
nexus.ida-analytics.de/ida/moira                   1323d422a434        7 days ago          387MB
busybox                              latest              8c811b4aec35        7 weeks ago         1.15MB
prakhar1989/static-site              latest              f01030e1dcf3        2 years ago         134MB 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;این لیست، لیست همه‌ی ایمِج‌هایی هست که من روی این سیستمم نصب دارم و از رجیستری‌های مختلف دریافت کردم. TAG به یک نسخه‌ی مشخص از ایمِج اشاره می‌کنه و IMAGE ID به آی‌دی منحصر به فرد اون ایمِج.&lt;/p&gt;

&lt;p&gt;برای سادگی فهم، ایمِج‌ها رو به چشم ریپازیتوری‌های گیت ببینید. ایمِج‌ها میتونن کامیت بشن و ورژن‌های مختلفی داشته باشن، در حالت عادی هم، داکر نسخه latest رو دریافت میکنه که مشابه شاخه یا branch اصلی یا main تو گیت هست. مثلا میخوایم یه نسخه از اوبونتو رو دریافت کنیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull ubuntu:12.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;برای اینکه از یه ایمِج استفاده کنید، یا میتونید اون رو از رجیستری داکر یا همون داکر هاب دریافت کنید یا یه ایمِج برای خودتون بسازید.&lt;/p&gt;

&lt;p&gt;مهم‌ترین چیزی که باید موقع انتخاب ایمِج‌ها تو ذهن داشته باشید، تفاوت بین ایمِج‌های پایه یا base و ایمِج‌های مبتنی یا child هستن:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ایمِج‌های پایه یا &lt;strong&gt;Base images:&lt;/strong&gt; ایمِج‌هایی هستند که بر هیچ ایمِج دیگه‌ای مبتنی نیستن، که معمولا (و نه همیشه) سیستم‌عامل هستن، و&lt;/li&gt;
  &lt;li&gt;ایمِج‌های مبتنی یا &lt;strong&gt;Child images:&lt;/strong&gt; که مشخصا مبتنی بر ایمج‌های پایه هستن.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;و دو جور ایمِج رسمی و عیر رسمی هم داریم:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ایمِج رسمی یا &lt;strong&gt;Official image:&lt;/strong&gt; که توسط خود گروه داکر پشتیبانی و نگهداری میشن. معمولا تک‌کلمه‌ای هستن مثل ubuntu، busybox و hello-world. و&lt;/li&gt;
  &lt;li&gt;ایمِج‌های عیر رسمی یا &lt;strong&gt;Unofficial image:&lt;/strong&gt; که توسط کاربرهایی مثل من و شما ساخته میشن و بر اساس ایمِج‌های اصلی هستن که معمولا شکل نمایششون &lt;code class=&quot;highlighter-rouge&quot;&gt;user-name/image-name&lt;/code&gt; هست.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;اولین-ایمِج-ما&quot;&gt;اولین ایمِج ما&lt;/h2&gt;

&lt;p&gt;حالا که درک بهتری از ایمِح‌های داکر داریم، وقتش شده که یه ایمِج برای خودمون بسازیم. برای اینکار، یه برنامه‌ی ساخته شده با &lt;a href=&quot;https://www.saidi27.com/%D8%A2%D9%85%D9%88%D8%B2%D8%B4-%D9%86%DA%A9%D8%B3%D8%AA-%D8%AC%DB%8C-%D8%A7%D8%B3-%D8%B1%DB%8C%D8%AF%D8%A7%DA%A9%D8%B3-%D8%AA%D8%A7%D9%86%DA%A9-%D9%88-%DA%A9%D8%A7%D9%86%D9%81%DB%8C%DA%AF-%D9%87%D8%A7&quot;&gt;ری‌اکت‌جی‌اس&lt;/a&gt; رو اصطلاحا داکرایز یا Dockerize میکنیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i -g create-react-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اول که باید نصاب ری‌اکت رو نصب کنیم، و بعد پروژه رو میسازیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ create-react-app our-awesome-app
$ cd our-awesome-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;از اینجا به بعد هر کار خواستید با پروژه بکنید… اما در نهایت یه فایل به اسم &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; تو پوشه‌ی اصلی پروژه بسازید و اون رو بازش کنید و محتوای زیر رو بهش اضافه کنید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM node:9.6.1

RUN mkdir /usr/src/app
WORKDIR /usr/src/app

ENV PATH /usr/src/app/node_modules/.bin:$PATH

COPY package.json /usr/src/app/package.json
RUN npm i --silent
RUN npm i react-scripts -g --silent

CMD \[&quot;npm&quot;, &quot;start&quot;\]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;و یه فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt; بسازید (به . اول اسمش دقت کنید) و توش محتوای زیر رو بریزید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node_modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;و در نهایت ایمِج رو بسازید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t our-awesome-app .
...
Successfully built 8ab82c09e422
Successfully tagged our-awesome-app:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;و بعد از اتمام ساخت، کانتینر مربوط به ایمِجتون رو ایجاد و اجرا کنید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -it \
  -v ${PWD}:/usr/src/app \
  -v /usr/src/app/node_modules \
  -p 3000:3000 \
  --rm \
  our-awesome-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;به همین سادگی! شما پروژتون رو داکرایز کردید :) حالا میتونید &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000&lt;/a&gt; رو باز کنید و ببینید پروژتون رو.&lt;/p&gt;

&lt;h1 id=&quot;داکر-کامپُز-docker-compose&quot;&gt;داکر کامپُز (Docker Compose)&lt;/h1&gt;

&lt;p&gt;تا اینجا با خود داکر سر و کله زدیم و تا حدودی اکوسیستمش رو شناختیم. منتهی همچنان ابزارهایی هستند که یادگیریشون برامون خیلی پر کاربرد خواهد بود. چندتا از این ابزارهای خوب:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/machine/&quot;&gt;Docker Machine&lt;/a&gt; که کمک میکنه هاست‌های داکر روی کامپیوترتون، کلاد یا فضاهای ابری و حتی دیتا‌سنترتون بسازید،&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt; ابزاری برای ساخت اپلیکیشن‌های چند کانتینری داکر (چندتا کانتینر رو در کنار هم قرار میده) و&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/swarm/&quot;&gt;Docker Swarm&lt;/a&gt; که ابزاری برای ساخت کلاسترها یا خوشه‌های کانتینریه.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;تو این بخش میخوایم بریم سراغ داکر کامپُز و ببینیم که چطور میشه اپلیکیشن‌های داکر مبتنی بر چند کانتینر ساخت.&lt;/p&gt;

&lt;p&gt;اینطور فرض کنید که یه کانتینر مسئول اجرای کدهای PHP، Go، JavaScript و زبان‌های دیگست، یه کانتینر دیتابیس MySql و MongoDb رو داره، یه کانتینر وب‌سرور Apache یا NginX و…&lt;/p&gt;

&lt;p&gt;گذشته‌ی داکر کامپُز جالبه، تقریبا چهار سال پیش (سال ۲۰۱۴) شرکتی به اسم OrchardUp ابزاری رو به اسم Fig به بازار عرضه کرد. هدف از ساخت Fig این بود که بشه محیط برنامه‌نویسی یا Development Environment مبتنی بر داکر ساخت و اونها رو ایزوله کرد، تا فضای کاری برنامه‌نویس‌ها مشابه به هم بشه.&lt;/p&gt;

&lt;p&gt;تا اینجا، داکر یه ابزاری بود برای ساخت پروسه‌ها یا Application Processes. بعد از این، داکر APIهای مختلفی رو ارائه داد که بشه پوشه‌ها رو بین کانتینرها به اشتراک گذاشت و پورتی رو از هاست به کانتینر فوروارد کرد، لاگ‌ها رو نمایش داد و غیره. ولی با همه‌ی اینها، داکر فقط یه چیز بود: ابزاری برای ساخت پروسه‌ها!&lt;/p&gt;

&lt;p&gt;با اینکه داکر این امکان رو میده تا بشه کانتینرهای مختلف رو با هم اورکِسترِیت یا Orchestrate کرد (به زبان ساده یعنی هماهنگی بینشون ایجاد کرد تا منظم و درست کار کنن)، همچنان با این کانتینرها به شکل «یک موجودیت» یا Single Entity برخورد نمیکنه. یعنی مهندس نرم‌افزار باید همه‌چیز رو خودش مدیریت کنه. اینجاست که حضور ابزاری مثل Fig خیلی بدرد خورد! از این به بعد مهندسین باید به این شکل بهش نگاه میکردن: «یک برنامه‌ی داکر رو اجرا کنیم که کلاستری از کانتینرها رو مدیریت میکنه» و نه اینکه صرفا یه کانتینر رو اجرا کنیم.&lt;/p&gt;

&lt;p&gt;مشخص شد که خیلی از بروبچه‌ها و مهندسینی که از داکر استفاده میکردن با این تعریف موافق بودن. برای همین هم وقتی که Fig در حال محبوب شدن بود، شرکت داکر اون رو خرید و اسمش رو به Docker Compose تغییر داد.&lt;/p&gt;

&lt;p&gt;خب، حالا اصلا کامپُز برای چی استفاده میشه؟ کامپُز یه ابزاره که کمک میکنه برنامه‌هایی رو با چند کانتینر اورکستریت کنیم. این ابزاری فایلی رو ایجاد میکنه به اسم &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; که کل دستوراتی رو که لازم هست رو در خودش داره و اونها رو فقط با یه دستور اجرا میکنه.&lt;/p&gt;

&lt;p&gt;بذارید با هم برنامه‌ای رو که بالاتر با داکر ساختیم، اینبار با داکر کامپُز اجرا کنیم. برای اینکار فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; تو پوشه‌ی اصلی برنامه بسازید و محتوای زیر رو توش قرار بدید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '3.5'

services:

  our-awesome-app:
    container_name: our-awesome-app
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      \- '.:/usr/src/app'
      \- '/usr/src/app/node_modules'
    ports:
      \- '3000:3000'
    environment:
      \- NODE_ENV=development
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حالا &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;کامپُز رو نصب کنیم&lt;/a&gt;…&lt;/p&gt;

&lt;p&gt;بعد از نصب کامپُز، دستور زیر رو اجرا کنید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose up -d --build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ساختار داکر کامپُز
——————&lt;/p&gt;

&lt;p&gt;اصلی‌ترین دلیل ساخت داکر کامپُز، ایجاد برنامه‌ها بر اساس معماری مایکروسرویس بود، یا درواقع کانتینرها و روابط بینشون. اما داکر کامپًز ویژگی‌های دیگه‌ای هم داره:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ساخت یک ایمِج داکر (درصورتی که یک فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; معتبر تو پوشه‌ی اصلی موجود باشه) با دستور:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;مقیاس‌بندی کانتینرها با دستور:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose scale SERVICE=3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;نجات‌دادن یا درواقع اجرای مجدد کانتینرها در صورت پَنیک با دستور:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up --no-recreate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;یکی از مهم‌ترین دستورات داکر کامپُز، &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; هست که اول دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt; و بعد &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose run&lt;/code&gt; رو اجرا می‌کنه.&lt;/p&gt;

&lt;h2 id=&quot;جریان-کار-یا-workflow-در-داکر-کامپُز&quot;&gt;جریان کار یا Workflow در داکر کامپُز&lt;/h2&gt;

&lt;p&gt;جریان کار تو داکر کامپُز سادست:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;هر سرویس رو تو یه داکر فایل تعریف می‌کنیم (یک روش)،&lt;/li&gt;
  &lt;li&gt;سرویس‌ها و روابطشون رو تو فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-dompose.yml&lt;/code&gt; تعریف می‌کنیم و&lt;/li&gt;
  &lt;li&gt;دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; رو اجرا می‌کنیم تا سیستم بالا بیاد.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;اما برای اینکه بهتر متوجه بشیم، میریم که چندتا اپ مختلف بسازیم تا روش‌ها دیگه برای استفاده از داکر کامپُز رو یاد بگیریم&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.saidi27.com/blog/%D8%AF%D8%A7%DA%A9%D8%B1-%DA%A9%D8%A7%D9%86%D8%AA%DB%8C%D9%86%D8%B1-%D9%88-%D8%A7%D8%AA%D9%88%D9%85%D8%A7%D8%B3%DB%8C%D9%88%D9%86&quot;&gt;ادامه‌ی مطلب رو میتونید از سایت خودم بخونید…&lt;/a&gt;&lt;/p&gt;</content><author><name>آیین سعیدی</name></author><category term="docker" /><category term="docker-compose" /><category term="container" /><category term="javascript" /><category term="automation" /><summary type="html">داکر چی هست؟ داکر کامپز چیکار میکنه و چجوری میتونیم پروژمون رو اتوماسیون کنیم؟</summary></entry><entry><title type="html">گریزی بر گولنگ goroutines / race condition</title><link href="http://pullrequest.ir/Golang-%D9%85%D8%A7%D9%84%D8%AA%DB%8C-%D8%AA%D8%B1%D8%AF%DB%8C%D9%86%DA%AF/" rel="alternate" type="text/html" title="گریزی بر گولنگ goroutines /  race condition" /><published>2018-06-03T00:00:00+00:00</published><updated>2018-06-03T00:00:00+00:00</updated><id>http://pullrequest.ir/Golang-%D9%85%D8%A7%D9%84%D8%AA%DB%8C-%D8%AA%D8%B1%D8%AF%DB%8C%D9%86%DA%AF</id><content type="html" xml:base="http://pullrequest.ir/Golang-%D9%85%D8%A7%D9%84%D8%AA%DB%8C-%D8%AA%D8%B1%D8%AF%DB%8C%D9%86%DA%AF/">&lt;p&gt;&lt;img src=&quot;https://files.virgool.io/upload/users/3676/posts/jxcaqbot9swh/hvid0cqa4bve.jpeg&quot; alt=&quot;Go&quot; title=&quot;Go&quot; /&gt;&lt;/p&gt;

&lt;p&gt;گو روتینها (شبه مالتی تریدینگ) در زبان جالب go یکی از ویژگیهاییه که اون رو محبوب کرده و برای مقاصد زیادی هم کاربرد داره و استفاده ازش هم خیلی راحته
در این خُردمقاله فقط اشاره ای مختصر به روتینها میکنم ولی این مبحث خیلی جذابه و جای بحث زیادی داره که از حجم این مقاله و علم بنده بر نمیاد کامل شرح داده بشه. به صورت کلی هرگاه ما یک ترد(نه به معنای ترد در پردازنده که در زبانهای C++ و … پیاده میشه) ایجاد میکنیم دستوراتی که داخل ترد نوشته شده در یک ترد دیگه اجرا خواهد شد که ممکنه همزمان/موازی با ترد اصلیمون اجرا بشوند یا غیر همزمان اجرا بشوند.
ساختار نوشتن go به صورت زیره که در تابع main برنامه اجرا میشه ، ( برای نوشتن برنامه های اجرایی mainرو داریم نه همه جا! )&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;اگر&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;عبارت&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;رو&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;قبل&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;از&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;یک&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;تابع&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;قرار&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;بدیم&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;اون&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;رو&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;در&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;یک&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ترد&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;جدا&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;اجرا&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;میکنه&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;time&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1:Salam Virgool!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2:Hello Virgool!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3:Hola Virgool!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
 &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closing&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;به جای sleep میتونستیم از fmt.Scanln برای جلوگیری از بسته شدن برنامه استفاده کنیم
خروجی های متفاوتی برای کد بالا میتونیم انتظار داشته باشیم:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1:Salam Virgool!
3:Hola Virgool!
2:Hello Virgool!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1:Salam Virgool!
2:Hello Virgool!
3:Hola Virgool!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;پس میتونیتم از این نتیجه بگیریم که اجرای تابع برای چاپ عبارت شماره 2 به ترتیب کدی که نوشتیم ممکنه باشه یا با تاخیر و غیر همزمان باشه!
روتینها کجا به کار میان؟
خیلی جاها مثل نوشتن یک روتین برای انجام کارهای زمانبری چون دانلود فایل یا اتصال به شبکه یا اجرای الگوریتمهای زمانبر به طور موازی و انواع و اقسام کار با IO&lt;/p&gt;

&lt;p&gt;جهنم race conditions
چرا جهنم؟
چون باگهایی که به صورت ریس کاندیشن (شرایط مسابقه) پیش میان همیشه یک خطا در روند اجرایی برنامه رو بوجود نمیارن که بتونیم با خوندن چند خط بالا پایین برنامه اونها رو دیباگ کنیم.
یعنی یکبار این باگ هست و یکبار نیست ،یا بدتر هر بار یه چیزی نشون بده :(
چطور این باگ بوجود میاد؟
به رفتار این تیکه کد دقت کنید:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Press Enter:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scanln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i = %d &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;از کد بالا میشه انتظار رفتارهای متفاوتی داشت که اگر چیزی که تو ذهن برنامه نویسه یکی از این رفتار باشه اون موقع است که باگهای بدی بوجود میاد&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(6+5)=11 * 3 = 33 =&amp;gt; i = 33
(6*3)=18 * 5= 23 =&amp;gt; i = 23
(6*3)=18 =&amp;gt; i = 18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;حالا چطور اون چیزی که مد نظرمونه در مورد ترتیب روند اجرای دستورات رو اجباری کنیم؟
با استفاده از کانالها Channels  ما میتونیم از شرایط و مقادیر یک روتین باخبر بشیم&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;MyChannel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MyChannel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routine&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyChannel&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Press Enter:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scanln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i = %d &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;میایم قبل از اجرای روتین یک کانال به نام MyChannel میسازیم و بعدش منتظر میمونیم که اون تموم بشه و کار رو ترد اصلی انجام بده که نتیجه همیشه 33 خواهد شد
چون به ترتیب عبارت اولمون
(6+5)=11 * 3 = 33 =&amp;gt; i = 33
برنامه اجرا میشه!&lt;/p&gt;

&lt;p&gt;ساده بود نه؟ :)&lt;/p&gt;</content><author><name>محمود اسکندری</name></author><category term="golang" /><category term="گولنگ" /><category term="مالتی_تردینگ" /><category term="race_condition" /><summary type="html"></summary></entry><entry><title type="html">از سیر تا پیاز ری‌اکت، نکست و ریداکس!</title><link href="http://pullrequest.ir/%D8%A2%D9%85%D9%88%D8%B2%D8%B4-%D8%B1%DB%8C-%D8%A7%DA%A9%D8%AA-%D9%86%DA%A9%D8%B3%D8%AA-%D8%AC%DB%8C-%D8%A7%D8%B3-%D9%88-%D8%B1%DB%8C%D8%AF%D8%A7%DA%A9%D8%B3/" rel="alternate" type="text/html" title="از سیر تا پیاز ری‌اکت، نکست و ریداکس!" /><published>2018-05-22T00:00:00+00:00</published><updated>2018-05-22T00:00:00+00:00</updated><id>http://pullrequest.ir/%D8%A2%D9%85%D9%88%D8%B2%D8%B4-%D8%B1%DB%8C%E2%80%8C%D8%A7%DA%A9%D8%AA-%D9%86%DA%A9%D8%B3%D8%AA%E2%80%8C%D8%AC%DB%8C%E2%80%8C%D8%A7%D8%B3-%D9%88-%D8%B1%DB%8C%D8%AF%D8%A7%DA%A9%D8%B3</id><content type="html" xml:base="http://pullrequest.ir/%D8%A2%D9%85%D9%88%D8%B2%D8%B4-%D8%B1%DB%8C-%D8%A7%DA%A9%D8%AA-%D9%86%DA%A9%D8%B3%D8%AA-%D8%AC%DB%8C-%D8%A7%D8%B3-%D9%88-%D8%B1%DB%8C%D8%AF%D8%A7%DA%A9%D8%B3/">&lt;p&gt;عمیق‌تر در مورد جاوااسکریپت، ری‌اکت و نکست‌جی‌اس بدونیم&lt;/p&gt;

&lt;h1 id=&quot;نکستجیاس-و-ریداکستانک-از-مبتدی-تا-پیشرفته&quot;&gt;نکست‌جی‌اس و ریداکس‌تانک، از مبتدی تا پیشرفته&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://files.virgool.io/upload/users/3181/posts/uzcgpsjoceof/wbnq800rbiov.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;مقدمه&quot;&gt;مقدمه&lt;/h1&gt;

&lt;p&gt;خیلی از دوستان من با موضوعات مختلفی خصوصا در زمینه جاوا‌اسکریپت دچار مشکل شدن. بعضی از مفاهیم رو نفهمیدن و یا نمیدونستن از کجا باید شروع کنن. برای همین تصمیم گرفتم که این مطلب رو بنویسم. قصد دارم اینجا برای سطوح مبتدی تا پیشرفته در مورد ری‌اکت و نکست‌جی‌اس و همچنین ریداکس توضیح بدم. و سعی میکنم این مطلب رو تا حد امکان گسترده کنم تا تمامی مواردی که برای یک برنامه‌نویس خوب شدن لازم هست رو پوشش بدم.&lt;/p&gt;

&lt;p&gt;اما اساسا چرا این مطلب رو نوشتم؟ خب، اول از همه اینکه بتونم هر آنچه که بلد هستم رو یک‌جا نگه دارم و بعدا هم ازش استفاده کنم. دوم اینکه همچین آموزشی رو تقریبا هیچ‌کجای وب، و خصوصا تو سایت‌های ایرانی پیدا نکردم.&lt;/p&gt;

&lt;p&gt;متنی که اینجا نوشته شده، حاصل چند سال تلاش من برای یادگیری، و تقریبا یک ماه برای خلاصه‌کردن تمام اون اطلاعات بود تا بتونم یک مرجع کامل رو بسازم، سعی کردم خط به خط کدها رو توضیح بدم و ریپازیتوری گیت رو باهاش سینک و همگام نگه‌دارم. از اینکه این مطالب به دست دیگران هم برسه و کمک به چند نفر بکنه واقعا خوشحال میشم، اما تنها خواهش من از خوانندگان و شما، اینه که اگر این مطلب رو جایی به اشتراک میذارید، منبع اون رو هم ذکر کنید.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/Fy2S8J&quot;&gt;همچنین مطلب کامل رو در سایت خودم میتونید پیدا کنید و در مورد ری‌اکت و نکست‌جی‌اس بیشتر مطالعه کنید.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;سپاس.&lt;/p&gt;

&lt;h1 id=&quot;جاوااسکریپت-و-اکمااسکریپت-ecmascript&quot;&gt;جاوا‌اسکریپت و اکما‌اسکریپت (ECMAScript)&lt;/h1&gt;

&lt;p&gt;اولین چیزی که لازم هست بدونید، اینه که جاوا‌اسکریپت توسط شرکت نِت‌اِسکیِپ (شرکت قدیمی موزیلا فایرفاکس) ساخته و به سازمان اِکما داده شد تا اون رو استانداردسازی کنن. اِکما سازمانیه که وظیفش استانداردسازی اطلاعاته.&lt;/p&gt;

&lt;p&gt;اونچه که در نهایت از جاوا‌اسکریپت توسط سازمان اِکما ارائه شد، اِکما‌اِسکریپت بود. ساده‌تر بگم، اِکما‌اِسکریپت یک استاندارد هست، در حالی که جاوا‌اسکریپت محبوب‌ترین پیاده‌سازی از اون استاندارد به حساب میاد. جاوا‌اِسکریپت، اِکما‌اِسکریپت رو پیاده‌سازی میکنه و بر پایه اون ساخته میشه.&lt;/p&gt;

&lt;p&gt;حالا سوالی که مطرح میشه، اینه که &lt;strong&gt;“ES” چیه&lt;/strong&gt;؟&lt;/p&gt;

&lt;p&gt;ای‌اِس، مخفف اِکما‌اِسکریپته (&lt;strong&gt;E&lt;/strong&gt;CMA&lt;strong&gt;S&lt;/strong&gt;cript)، هرجایی که ای‌اِس رو در کنار یک عدد دیدید، مثل ای‌اس۶، یادتون باشه که داره به یک نسخه از اِکما‌اِسکریپت یا در واقع یک نسخه از استاندارد اشاره میشه.&lt;/p&gt;

&lt;h1 id=&quot;ایاِس-es&quot;&gt;ای‌اِس (ES)&lt;/h1&gt;

&lt;p&gt;ای‌اِس تا به اینجا ۸ نسخه مختلف رو ارائه کرده، &lt;strong&gt;ای‌اِس۱، ۲، ۳ و ۴&lt;/strong&gt; بین سال‌های ۱۹۹۷ تا ۱۹۹۹ ارائه شدن و دیگه ازشون پشتیبانی نمیشه. (ما هم کاری بهشون نداریم).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ای‌اِس۵&lt;/strong&gt; تقریبا ۱۰ سال بعد از اس‌اس۴ یعنی اواخر سال ۲۰۰۹ (تاریخ دقیق رو نمیدونم) ارائه داده شد.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ای‌اِس۶&lt;/strong&gt; در سال ۲۰۱۵ منتشر شد که برای راحتی کار، بهش ای‌اس۲۰۱۵ هم میگن. در واقع چون ای‌اس۶ در سال ۲۰۱۵ ارائه شده، بهش ای‌اِس۲۰۱۵ میگن!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ای‌اِس۷/ای‌اس۲۰۱۶&lt;/strong&gt; که مطمئنا میتونید پیشبینی کنید در سال ۲۰۱۶ منتشر شد.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ای‌اس۸/ای‌اس۲۰۱۷&lt;/strong&gt; هم، در سال ۲۰۱۷ منتشر شد.&lt;/p&gt;

&lt;h2 id=&quot;چرا-ورژنهای-مختلف-از-ایاس-منتشر-شدن&quot;&gt;چرا ورژن‌های مختلف از ای‌اس منتشر شدن؟&lt;/h2&gt;

&lt;p&gt;دلیلش اینه که هر وِرژِن، ویژگی‌های جدیدی رو ارائه کرده که با زمان خودش هم‌خوانی داشته باشه. فقط باید چند نکته رو به خاطر داشته‌باشید:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;پیشبینی میشه که هر سال یک نسخه جدید از اِکما‌اِسکریپت ارائه بشه،&lt;/li&gt;
  &lt;li&gt;اولین نسخه‌های اِکما‌اِسکریپت با عدد نسخه‌بندی میشدن، مثل ای‌اِس۱، ای‌اِس۲ و…&lt;/li&gt;
  &lt;li&gt;نسخه‌های جدید که از سال ۲۰۱۵ شروع شدن، به شکل &lt;strong&gt;ای‌اس[سال انتشار]&lt;/strong&gt; نام‌گذاری میشن.&lt;/li&gt;
  &lt;li&gt;اکما یک استاندارده، جاوا‌اسکریپت محبوب‌ترین پیاده‌سازی از اون استاندارد هست.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;چرا-ایاس۶&quot;&gt;چرا ای‌اس۶؟&lt;/h2&gt;

&lt;p&gt;نسخه ۶‌ام از اِکما‌اِسکریپت، ویژگی‌های خیلی خوبی رو به زبان جاوا‌اسکریپت اضافه کرد، و همین، یکی از دلایلی شد که ری‌اَکت به طور پیش‌فرض ازش پشتیبانی میکنه. مثلا مفاهیمی مثل «کلاس‌ها» و «ماژول‌ها»، که برای زبان‌های شئ‌گرا اجباری هستند، بهش اضافه شدن. از جمله ویژگی‌های دیگش، اضافه شدن دستورات &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;، جِنِراتور‌های شبیه به زبان پایتون، توابع فِلِشی (Arrow Function)، کالِکشِن‌ها، پرامِس‌ها (Promise) و غیره بوده.&lt;/p&gt;

&lt;p&gt;متاسفانه هنوز مرورگرها پشتیبانی از ای‌اِس۶ رو کامل نکردن و ای‌اِس۶ به خودی خود تو مرورگرها پشتیبانی نمیشه. اینجاست که مفاهیم تِرَنس‌پایلِرها (transpiler) خودشون رو نشون میدن که بعد از توضیح توابع فِلِشی (برای راحتی کار میگم اَرو فانکشِن) بهشون میپردازم.&lt;/p&gt;

&lt;h2 id=&quot;arrow-functions&quot;&gt;Arrow Functions&lt;/h2&gt;

&lt;p&gt;یکی از ویژگی‌های خیلی خوبی که توی ای‌اِس۶ وجود داره، استفاده از اَرو فانکشن‌هاست. به اسمش دقت نکنید، مفهومش خیلی سادست. ارو فانکشن‌ها، در واقع همون توابع قدیمی جاوااسکریپت هستند (با ویژگی‌های جدید‌تر که اینجا بهشون کاری نداریم) که تو ای‌اس۶ به شکل دیگه‌ای تعریف میشن و موقع تِرَنس‌پایل (یکمی پایینتر توضیح میدم در این مورد) به شکل توابع جاوااسکریپت درمیان، مثلا:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;بعد از تِرَنس‌پایل تبدیل میشن به:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ترنسپایلر-transpiler&quot;&gt;ترنس‌پایلر (transpiler)&lt;/h2&gt;

&lt;p&gt;حتما تا به حال واژه‌های «کامپایلِر» و «مفسر» به گوشتون خورده. تِرَنس‌پایلِرها در واقع نوعی کامپایلر هستند با یک تفاوت اصلی:&lt;/p&gt;

&lt;p&gt;کامپایلرها معمولا زبان رو به یک نسخه قابل اجرا برای ماشین تبدیل می‌کنن، مثلا زبان سی، کدهای باینری یا همون صفر و یک میسازه، یا جاوا بایت‌کد رو تولید میکنه.&lt;/p&gt;

&lt;p&gt;این درحالیه که ترنس‌پایلرها، یک سورس‌کد رو به یک سورس‌کد دیگه تبدیل می‌کنن (یا مثلا به یک زبان دیگه که مستقیم برای ماشین قابل درک نیست و باید دوباره کامپایل، اینتِرپرِت یا همون تفسیر بشه). مثلا کافی‌اسکریپت (CoffeeScript) که از خودش جاوا‌اسکریپت تولید میکنه، یا &lt;strong&gt;بابِل (Babel) که ای‌اس۶ رو به ای‌اس۵ (قابل پشتیبانی برای مرورگرها) تبدیل می‌کنه.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;بابِل یا بِیبِل (Babel) یک ترنس‌پایلر برای ای‌اس۶ هست که اون رو به ای‌اس۵ تبدیل میکنه. ای‌اس۵ توسط مرورگرها خیلی خوب پشتیبانی میشه و در حقیقت، ای‌اس۵ همون جاوا‌اسکریپتیه که عموما باهاش آشنایی دارن.&lt;/p&gt;

&lt;h2 id=&quot;بابِل-بِیبِل-babel&quot;&gt;بابِل، بِیبِل…؟ (Babel)&lt;/h2&gt;

&lt;p&gt;بابل یک تِرَنس‌پایلِر برای جاوا‌اسکریپته. بابل رو اکثرا بخاطر توانایی خوبش تو تبدیل ای‌اس۶ به ای‌اس۵ میشناسن.&lt;/p&gt;

&lt;p&gt;به عنوان مثال این کد که با ای‌اس۶ نوشته شده:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// \[2, 3, 4\]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;توسط بابل تبدیل میشه به کد ای‌اس۵:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// \[2, 3, 4\]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;که تقریبا همه‌جا قابل اجراست. بابل خیلی خوب از &lt;a href=&quot;https://www.saidi27.com/glossary/polyfill-(%D9%BE%D9%84%DB%8C%E2%80%8C%D9%81%DB%8C%D9%84)&quot;&gt;پُلی‌فیل‌های&lt;/a&gt; جاوا‌اسکریپت پشتیبانی میکنه و باعث میشه که کد جاوا‌اسکریپت ساخته شده برای مرورگرهای قدیمی هم قابل پشتیبانی باشه. به همین خاطر، بابل باعث میشه شما از تمام ویژگی‌های ای‌اس۶ استفاده کنید بدون اینکه پشتیبانی از نسخه‌های قدیمی مرورگرها رو از دست بدید (مفهوم پُلی‌فیل اینجا معلوم میشه).&lt;/p&gt;

&lt;h1 id=&quot;فرانتاند-و-مفاهیم-اِسپیاِی-spa&quot;&gt;فرانت‌اند و مفاهیم اِس‌پی‌اِی (SPA)&lt;/h1&gt;

&lt;p&gt;اطلاعاتی که ما در اینترنت میبینیم، مجموعه‌ای از کدهای HTML، JavaScript و CSS هستن. قدیم‌ها، زمانی که خیلی از برنامه‌نویس‌ها از PHP (هنوز هم استفاده میکنن) برای نوشتن صفحات وب استفاده می‌کردن و جِی‌اِس مثل امروز محبوب نبود، هر صفحه از سایت باید بصورت جداگانه نوشته می‌شد. و زمانی که کاربر روی یک لینک کلیک میکرد، کل صفحه از اول رِندِر (Render) می‌شد. این فرایند برای کاربر، خسته‌کننده و طاقت‌فرسا بود و حتی گاهی بخاطر زمان زیادی که باید برای بارگذاری صفحه صرف میکرد، از ادامه کارش پشیمون میشد.&lt;/p&gt;

&lt;p&gt;کم‌کم تکنیک‌هایی مثل اِی‌جَکس (AJAX) استفاده شدن، که مثلا وقتی صفحه در حال بارگذاری بود، شروع میکرد یک نماد کوچک لودینگ و بارگذاری (بهش معمولا میگن اِسپینِر یا spinner) رو نشون دادن و کاربر رو متوجه میکرد که اطلاعات در حال ارسال و دریافتن.&lt;/p&gt;

&lt;p&gt;این ایده، که اطلاعات تو یک صفحه بارگذاری بشن و کاربر مدام مجبور به عوض کردن صفحه‌ها نشه (مگر در مواقع لازم) باعث ایجاد تعریف جدیدی از وب‌اَپلیکِیشِن‌ها شد، اِس‌پی‌اِی (SPA) یا Single Page Application راهش رو به لغت‌نامه‌ی برنامه‌نویس‌ها باز کرد!&lt;/p&gt;

&lt;p&gt;SPA هدفش ایجاد یک تجربه کاربری بهتر برای کاربرهاست. در حقیقت، SPA کار رو برای برنامه‌نویس سخت‌تر و برای کاربر راحتتر کرد. تو یک اپلیکیشن SPA ایده‌آل، کاربر شما متوجه عوض شدن صفحه‌ها نمیشه و احساس میکنه که همه‌چیز در حال رخ‌دادن تو یک صفحست.&lt;/p&gt;

&lt;p&gt;اما داستان سمت برنامه‌نویس کمی فرق می‌کنه. کاربر زمانی میتونه اطلاعات رو تو مرورگرش ببینه، که کد‌های HTML ساخته شده باشن، و این یعنی برنامه‌نویس باید با هر درخواست کاربر، یا کلا صفحه رو از اول بارگذاری کنه (که دیگه SPA نیست) یا اینکه اون قسمتی از سایت رو که مرتبط با کاربر هست یا نیاز به تغییر داره رو مجددا با داده‌های جدید که از سمت سرور اومدن بارگذاری کنه.&lt;/p&gt;

&lt;p&gt;اینجاست که سایت شما، تا حدود زیادی از سمت سرور خودش جدا میشه و مفهوم جدیدی به عنوان &lt;strong&gt;فرانت‌اِند (Front End)&lt;/strong&gt; رو تعریف می‌کنه. فرانت‌اند و بَک‌اِند، در زمان‌های دور وجود نداشتن یا خیلی به هم نزدیک بودن. شما یک سایت رو کامل می‌نوشتید و مثلا تو یک صفحه PHP، همزمان از HTML و JavaScript استفاده می‌کردید. هر زمان که کاربر درخواست صفحه‌ی جدیدی رو میداد، شما یک اسکریپت جدید رو بارگذاری و صفحه‌های مربوطه رو از نو بازنویسی می‌کردید.&lt;/p&gt;

&lt;p&gt;زمانی که تعاریف فرانت‌اند و بَک‌اند ایجاد شدند، طراحی سایت شکل جدیدی به خودش گرفت. فرانت‌اند یجورایی بیشتر نماد &lt;strong&gt;طراحی سایت&lt;/strong&gt; شد و بَک‌اند بیشتر نماد &lt;strong&gt;منطق کاری (Business Logic)&lt;/strong&gt;. کدها سمت بک‌اند نوشته می‌شن و اطلاعات رو موقع نیاز به فرانت‌اند ارسال می‌کنن. از اینجا به بعد، برنامه‌نویس فرانت نیازی نداره که نگران SQL و دستورات مربوط به ارتباط با پایگاه داده و دریافت محصولات از اون باشه، یا حتی نگران فرایند عضویت و ورود به سایت. فرانت‌اند خودش رو بیشتر با بهبود تجربه کاربری درگیر کرد. لازم هست که بگم، این یک مفهوم کلی و جداسازی کلی بک‌اند و فرانت‌اند هست. اینکه وظیفه‌ی برنامه‌نویس چی باشه، نسبت به هر پروژه قابل تغییر هست و امرو، خیلی از برنامه‌نویس‌ها به هرد شاخه بَک و فرانت تسلط دارن.&lt;/p&gt;

&lt;p&gt;اینجا بود که مارس ۲۰۱۳، فیسبوک اولین نسخه از کتاب‌خونه ری‌اَکت رو ارائه داد…&lt;/p&gt;

&lt;h1 id=&quot;ریاکت-react&quot;&gt;ری‌اکت (React)&lt;/h1&gt;

&lt;p&gt;ری‌اَکت یا ری‌اَکت‌جِی‌اِس، یک کتابخونست برای ساختن روابط کاربری. ری‌اکت به برنامه‌نویس این اجازه رو میده، که بتونه وب‌اپلیکیشن‌های بزرگی رو بسازه که از اطلاعات مختلفی استفاده می‌کنن و میتونن تو یک صفحه تغییر کنن، بدون اینکه صفحه رو مجدد لود کنن (مفهوم SPA). هدف اصلی سازندگان ری‌اکت، سرعت، سادگی و مقیاس‌پذیری بوده.&lt;/p&gt;

&lt;p&gt;ری‌اکت صرفا تلاش میکنه تا رابط کاربری رو از راه Virtual-DOM تغییر بده. اینکه این ساز.کار به چه صورتی هست رو فعلا تشریح نمیکنم اما، اگر با معماری MVC آشنا باشید، ری‌اکت اون قسمت “V” رو به خودش اختصاص میده و میتونه با بقیه کتابخونه‌های جی‌اس خودش رو وفق بده.&lt;/p&gt;

&lt;p&gt;یکی دیگه از اَشکال ری‌اکت، ری‌اَکت‌نِیتیو هست که کمک میکنه، نرم‌افزارهای (اکثرا موبایل) نِیتیو یا سازگار با سیستم‌عامل توسط ری‌اکت ساخته بشن. ضمنا ری‌اکت از جی‌اس‌اکس (JSX) برای نمایش و ساخت المان‌ها استفاده میکنه که توضیح میدم در این مورد.&lt;/p&gt;

&lt;h2 id=&quot;جیاساکس-jsx&quot;&gt;جی‌اس‌اکس (JSX)&lt;/h2&gt;

&lt;p&gt;جِی‌اِس‌اِکس، یک زبان مشابه با HTML یا XML که کمک میکنه، تیکه‌های سایت (Component) جدای از هم ساخته بشن و به شکل یک شئ جاوا‌اسکریپت در بیان.&lt;/p&gt;

&lt;p&gt;ساده‌تر بگم، با JSX میشه ساختارهای مشابه به HTML رو ساخت. مثال:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Contact&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Us&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اینجا، &lt;code class=&quot;highlighter-rouge&quot;&gt;nav&lt;/code&gt; به عنوان یک کامپونِنت (Component) شناخته میشه. و شما میتونید جاهای مختلف برنامه، ازش استفاده کنید (یکبار بنویسید و چندبار استفاده کنید).&lt;/p&gt;

&lt;p&gt;این استفاده از JSX یکی دیگه از ویژگی‌های ری‌اکت به حساب میاد! اینکه شما برنامتون رو به &lt;strong&gt;تیکه‌های کوچکتری تقسیم می‌کنید و میتونید در جاهای مختلفی ازش استفاده کنید.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;کمی-بیشتر-در-مورد-ریاکت&quot;&gt;کمی بیشتر در مورد ری‌اکت&lt;/h2&gt;

&lt;p&gt;دنیای ری‌اکت جالبه. فرض کنید که یک کامپوننت رو ساختیم، مثلا یه لیست از محصولات. بعد کاربر روی یکی از محصولات کلیک میکنه، صفحه محصول باز میشه و کاربر محصول رو میبینه. کاری که ری‌اکت انجام داده چیه؟ ری‌اکت متوجه میشه که کدوم قسمت‌های سایت باید تغییر کنن و فقط اونها رو تغییر میده! پس اول شناسایی میکنه که چه چیزی تغییر کرده، و بعد تغییرات رو اعمال میکنه. ری‌اکت، به جای اینکه کل صفحه رو از اول بازسازی کنه، فقط قسمت‌هایی که تغییر کردند یا به نوعی وضعیتشون تغییر کرده رو با داده‌های جدید پر می‌کنه و اونها رو از نو میسازه و خیلی هم سریع این کار رو انجام میده!&lt;/p&gt;

&lt;h2 id=&quot;نصب-و-شروع-کار-با-ریاکت&quot;&gt;نصب و شروع کار با ری‌اکت&lt;/h2&gt;

&lt;p&gt;تصمیم ندارم اینجا به طور عمیق وارد ری‌اکت بشم و کد منبع ری‌اکت رو تشریح کنم، هدفم اینه که فضای کلی برای ورود به نکست‌جی‌اس رو ایجاد و شما رو با ساختار کلی و نحوه کار با ری‌اکت آشنا کنم. پس پیش میریم برای نصب ری‌اکت‌جی‌اس و یک آشنایی کلی با این کتابخونه.&lt;/p&gt;

&lt;h3 id=&quot;نصاب-ریاکت&quot;&gt;نصاب ری‌اکت&lt;/h3&gt;

&lt;p&gt;نصاب ری‌اکت، که توسط فیسبوک ساخته شده، تو مخازن npm موجوده و میتونید اون رو به صورت عمومی توی سیستم‌عاملتو بریزید:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; create-react-app

&lt;span class=&quot;se&quot;&gt;\#&lt;/span&gt; ساخت نرم‌افزار
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;create-react-app my-app-name

&lt;span class=&quot;se&quot;&gt;\#&lt;/span&gt; نصب وابسته‌ها &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Dependencies&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-app-name
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;مطمئن باشید که حتما &lt;a href=&quot;https://www.npmjs.com/get-npm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; رو روی کامپیوترتون نصب کردید&lt;/a&gt;. یکی از مهم‌ترین ویژگی‌های &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; اینه که تمام ابزارهای لازم رو از قبل برای شما فراهم کرده. مثلا از قبل Babel برای شما نصب شده و نیازی نیست که خودتون رو درگیر نصب و راه‌اندازیش بکنید. حالا میریم سراغ یک توضیح در مورد ساختار این کتابخونه.&lt;/p&gt;

&lt;h3 id=&quot;ساختار-پوشهها&quot;&gt;ساختار پوشه‌ها&lt;/h3&gt;

&lt;p&gt;اگر داخل پوشه &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; رو ببینید، متوجه حضور فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; میشید. این فایل در حقیقت نقطه شروع برنامست و حتما باید وجود داشته باشه، این یکی از بایدهای برنامه‌های ساخته شده با &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; هست. یه نگاهی به داخل این فایل میندازیم:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;theme-color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#000000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--
      manifest.json provides metadata used when your web app is added to the
      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/
    --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manifest&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%PUBLIC_URL%/manifest.json&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shortcut icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%PUBLIC_URL%/favicon.ico&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the \`public\` folder during the build.
      Only files inside the \`public\` folder can be referenced from the HTML.

      Unlike &quot;/favicon.ico&quot; or &quot;favicon.ico&quot;, &quot;%PUBLIC_URL%/favicon.ico&quot; will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running \`npm run build\`.
    --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;React App&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
      You need to enable JavaScript to run this app.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the &amp;lt;body&amp;gt; tag.

      To begin the development, run \`npm start\` or \`yarn start\`.
      To create a production bundle, use \`npm run build\` or \`yarn build\`.
    --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;همینطور که میبینید، این فایل چیز خاصی رو داخل خودش نداره. به جز خط ۲۸ام. که اِلِمانی تعریف شده با آی‌دی &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;، این رو تا اینجا توی ذهنتون داشته باشید. اتفاقی که از اینجا به بعد رخ میده، توی فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;src/index.js&lt;/code&gt; قرار داره. بذارید یه نگاهی هم به این فایل بندازیم:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./index.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;registerServiceWorker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./registerServiceWorker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;registerServiceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;این فایل هم یکی از فایل‌هایی هست که حتما باید وجود داشته باشه. دلیلش اینه که تو تتظیمات &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; این دو فایل به عنوان نقاط شروع برنامه تعریف شدند. خود &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; این دو فایل رو به هم متصل میکنه و زمانی رو که شما لازم هست خودتون بذارید تا تنظیمات رو انجام بدید، براتون ذخیره می‌کنه. میریم سراغ بررسی این فایل:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;اول از همه، این کد با استاندارد ای‌اس۶ نوشته شده. اگر قرار بود از استاندارد ای‌اس۵ (یا به اصطلاح Common JS) پیروی کنیم، باید مینوشتیم: &lt;code class=&quot;highlighter-rouge&quot;&gt;var React = require(&quot;react&quot;);&lt;/code&gt; تا کلاس ری‌اکت رو به پروژه اضافه کنیم. بعدا به این خواهیم پرداخت که این خط چه کارهایی انجام میده. فعلا بریم سراغ خط بعد.&lt;/li&gt;
  &lt;li&gt;تو خط دوم، شئیی به نام &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM&lt;/code&gt; فراخوانی شده. برای اطلاعاتون، قبل از نسخه ۰.۱۴ ری‌اکت، کتابخونه‌های &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt; و &lt;code class=&quot;highlighter-rouge&quot;&gt;react-dom&lt;/code&gt; یکی بودن. تنها وظیفه‌ای که ReactDOM به عهده داره، اینه که با اِی‌پی‌آی‌های &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; یا &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render&lt;/code&gt; یک اِلِمان جِی‌اِس‌اِکس رو، داخل یک اِلِمان دیگه (اینجا &lt;code class=&quot;highlighter-rouge&quot;&gt;document.getElementById('root')&lt;/code&gt;) نمایش بده.&lt;/li&gt;
  &lt;li&gt;خط سوم، خیلی ساده اِستایل‌های موجود در فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; رو، برای تمام اِلِمان‌هایی که اینجا قرار هست رِندِر بشن، اعمال میکنه.&lt;/li&gt;
  &lt;li&gt;خط چهارم یک کامپوننت رو، اینجا به اسم &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;، از &lt;strong&gt;یک کلاس ری‌اکت&lt;/strong&gt; فراخوانی کرد و بعد تو خط هفتم، به ReactDOM گفت که این کامپوننت رو داخل اِلِمان root رِندِر کنه. اما بریم سراغ &lt;strong&gt;کلاس ری‌اکت&lt;/strong&gt; و ببینیم اصلا حرفش چی هست.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./logo.svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App-header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App-logo&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App-title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/header&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App-intro&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/code&amp;gt; and save to reload&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;خب، طبق معمول خط اول، کلاس‌های ری‌اکت (&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;) و کامپوننت (&lt;code class=&quot;highlighter-rouge&quot;&gt;Component&lt;/code&gt;) رو از کتابخونه ری‌اکت فراخوانی کرده. اما تفاوت براکت‌ها &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; برای کامپوننت و ری‌اکت که براکت نداره چیه؟ این یکی از ویژگی‌های ای‌اس۶ هست که به این صورته:&lt;/p&gt;

&lt;p&gt;فرض کنید کلاسی رو به شکل زیر تعریف کردیم:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YeClassJadid1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YeClassJadid2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YeClassJadid3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YeClassJadid4&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YeClassDige&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اشیائی که تعریف شدن همشون ویژگی کلاس بودن رو دارن، اما تفاوتشون به این صورته که، کلاس اول (&lt;code class=&quot;highlighter-rouge&quot;&gt;YeClassJadid1&lt;/code&gt;)، فقط تو همون فایلی که تعریف شده، یا اسکوپی (Scope) که تعریف شده قابل خونده شدنه و جاهای دیگه قابل استفاده نیست. کلاس دوم (&lt;code class=&quot;highlighter-rouge&quot;&gt;YeClassJadid2&lt;/code&gt;) رو شما میتونید جاهای دیگه، با استفاده از روش &lt;code class=&quot;highlighter-rouge&quot;&gt;import { YeClassJadid2 } from &quot;path/to/the/file&quot;&lt;/code&gt; فراخوانی کنید. دلیلش هم اینه که کلاس دوم، به طور پیش‌فرض کلاس اصلی این ماژول یا فایل نیست. اما، کلاس سوم &lt;code class=&quot;highlighter-rouge&quot;&gt;YeClassJadid3&lt;/code&gt; به طور پیش‌فرض، کلاس اصلی تعریف شده (&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;) و زمانی که بخواد فراخوانی بشه، میتونه به صورت &lt;code class=&quot;highlighter-rouge&quot;&gt;import YeClassJadid3 from &quot;path/to/the/file&quot;&lt;/code&gt; یا حتی &lt;code class=&quot;highlighter-rouge&quot;&gt;import YeEsmeDige from &quot;path/to/the/file&quot;&lt;/code&gt; فراخوانی بشه. و در نهایت هم، کلاس چهارم &lt;code class=&quot;highlighter-rouge&quot;&gt;YeClassJadid4&lt;/code&gt; مثل کلاس‌های قبلی، اما با ارث‌بری از کلاس &lt;code class=&quot;highlighter-rouge&quot;&gt;YeClassDige&lt;/code&gt; خارج یا اِکسپورت میشه.&lt;/p&gt;

&lt;p&gt;نکته‌ای که گفتنش حائز اهمیته، اینه که هر ماژول، یا هر فایل، فقط یک کلاس رو میتونه به صورت &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; خارج کنه! تو مثال بالا، یکی از کلاس‌های &lt;code class=&quot;highlighter-rouge&quot;&gt;YeClassJadid3&lt;/code&gt; یا &lt;code class=&quot;highlighter-rouge&quot;&gt;YeClassJadid4&lt;/code&gt; میتونن خاصیت &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; رو داشته باشن!&lt;/p&gt;

&lt;p&gt;باز هم میگم، هدفم این نیست که عمیق وارد ری‌اکت بشم و فقط میخوام شما رو با این محیط آشنا کنم. برنامه اینه که شما وارد نِکست‌جِی‌اِس بشید و من اونجا بیشتر درمورد خود ری‌اکت می‌نویسم. تا اینجا هم خوب پیش اومدیم، بریم سراغ کامپوننت‌ها و یه کامپوننت بسازیم.&lt;/p&gt;

&lt;h3 id=&quot;ساخت-کامپوننت&quot;&gt;ساخت کامپوننت&lt;/h3&gt;

&lt;p&gt;برای اینکه بهتر متوجه بشید کامپوننت‌ها چی هستند، صفحات وب رو به تیکه‌های کوچیک تقسیم کنید. مثلا نوار بالای صفحه یه کامپوننت جدا، لیست محصولات یه کامپوننت جدا و همینطور ادامه بدید…&lt;/p&gt;

&lt;p&gt;📷&lt;/p&gt;

&lt;p&gt;اول، کل صفحه یک کامپوننت هست، بعد هر تیکه‌ای از صفحه تقسیم به کامپوننت‌های کوچک‌تر میشه و پیش میره. این موضوع رو با ساخت یک کامپوننت راحتت درک میکنید. برای شروع، داخل پوشه &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; یک پوشه دیگه به اسم &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt; یا هر اسم دیگه‌ای که دوست دارید ایجاد کنید. اینکه پوشه‌ها چطور باشن، دست خودتونه، اما یادتون باشه که یک‌سری استاندارد یا کانوِنشِن (Convention) برای اینکار هست که مدیریت کد رو راحتتر میکنه. در نهایت داخل این پوشه، یک فایل به اسم &lt;code class=&quot;highlighter-rouge&quot;&gt;MyComponent.js&lt;/code&gt; بسازید و داخلش این کد رو قرار بدید:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThisIsAComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;کامپوننتی که ساختیم خیلی سادست، یه لیست با ۵تا آیتم. که باید، حتما داخل تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; قرار بگیرن، و این تابع هم، فقط باید یک اِلِمان رو، یا چند اِلِمانی که داخل یک المان والد جمع شدند رو برگردونه. حالا باید این کامپوننت رو داخل &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; فراخوانی کنیم. کار خیلی ساده‌ایه. &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; رو باز کنید و اون رو به شکل زیر تغییر بدید:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./logo.svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThisIsAComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./components/MyComponent&quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App-header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App-logo&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App-title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/header&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;App-intro&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/code&amp;gt; and save to reload&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ThisIsAComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;خب، کامپوننت رو ساختیم و اون رو به کامپوننت اصلی اضافه کردیم. حالا دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; رو اجرا کنید و بعد داخل مرورگر به آدرس &lt;a href=&quot;http://localhost:3000/&quot;&gt;localhost:3000&lt;/a&gt; برید و نتیجه رو ببینید. بعد از اینکه تموم شد، میتونید سرور رو ببندید و برید سراغ مرحله بعد.&lt;/p&gt;

&lt;h3 id=&quot;گریزی-به-state&quot;&gt;گریزی به state&lt;/h3&gt;

&lt;p&gt;فرض کنید که قرار بود دکمه‌ای وجود داشته باشه، تا با کلیک کردن روش، کامپوننت ما یا حتی یک بخشی از کامپوننت نمایش داده بشه و یا مخفی بشه، یکی از این دو حالت ساده! اینجا لازم هست که کمی در مورد مفهوم استِیت (state) توضیح بدم. کامپوننت‌های شما، همینطور که تا اینجا دیدید، کار خاصی رو به خودی خودشون انجام نمیدن، چون در حقیقت اِلِمانهای HTML هستند، یا حتی شاید لازم باشه در طول زمان تغییراتی رو پیدا کنن. ملموس‌ترین نوع تغییر، زمانی رخ میده که شما اطلاعاتی رو از جایی (از یک سرور) دریافت میکنید و می‌خواید به کاربر نشون بدید، اما تو مدت زمانی که اطلاعات در حال دریافت هستند، علاقه دارید تا یک اسپینر (spinner) رو نمایش بدید، تا به کاربر بگید که اطلاعات در حال بارگزاری هستن. یه سناریوی دیگه اینکه، با کلیک روی یک چِک‌باکس (checkbox) یک فیلد مخفی شده رو نمایش بدید و مثال‌های دیگه. اینجاست که استیت به کمک شما میاد.&lt;/p&gt;

&lt;p&gt;استیت در حقیقت محل ذخیره‌ي آخرین تغییرات و حالات کامپوننته. مثلا شما بهش میگید که کامپوننت من در حالت عادی، نمایش داده میشه، اما من میخوام، زمانی که کاربر روی یک دکمه کلیک میکنه، کامپوننتم رو مخفی کنم. اینجا، نمایش داده شدن یا مخفی شدن، جز حالات یا استیت کامپوننت به حساب میاد. &lt;strong&gt;ری‌اکت، زمانی که استیت تغییر میکنه، کامپوننت رو مجدد بارگزاری یا رِندِر میکنه&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;برای اینکه با استیت هم کار کنیم و بهتر درکش کنیم، به تریتیب زیر، به کامپوننت &lt;code class=&quot;highlighter-rouge&quot;&gt;ThisIsAComponent&lt;/code&gt; استیت میدیم،&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;حالت دیفالت یا اولیه رو برای کامپوننت تعریف میکنیم&lt;/li&gt;
  &lt;li&gt;توسط یک ایونت (Event) حالت یا همون استیت رو تغییر میدیم.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;کامپوننت رو به شکل زیر بازنویسی میکنیم:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThisIsAComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;isHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;toggleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;isHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHidden&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Change&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;کارهایی که انجام شده، به همراه توضیحاتشون به ترتیب زیر هستن:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; به کامپوننت اضافه شده. این تابع که در حقیقت از &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;تعاریف کلاس در جاوا‌اسکریپت&lt;/a&gt; برگرفته شده، کارهای متفاوتی رو میتونه انجام بده. اما یادتون باشه، &lt;strong&gt;هر موقع که میدونستید کامپوننتتون قرار هست حالات مختلفی رو برای نمایش داشته باشه، حالت اولیش (Initial State) رو اینجا تعریف کنید.&lt;/strong&gt; مهمترین نکته اینه که به محض تعریف کردن &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;، تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt; فراخوانی بشه. اگر فراموش کنید که &lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt; رو بلافاصله فراخوانی کنید، &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; که در حقیقت همون کامپوننت شماست و اطلاعات کامپوننت رو توی خودش داره، خالی خواهد موند و در نتیجه امکان استفاده از اِستِیت و بقیه ویژگی کامپوننت‌ها رو نخواهید داشت.&lt;/li&gt;
  &lt;li&gt;قدم بعدی، داخل &lt;code class=&quot;highlighter-rouge&quot;&gt;construct&lt;/code&gt; و زیر &lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt;، استیت اولیه یا همون Default رو تعریف کردم. شکل تعریفش هم یه شئ ساده بوده که داخلش فقط از &lt;code class=&quot;highlighter-rouge&quot;&gt;isHidden: false&lt;/code&gt; استفاده کردم تا بگم، در حالت عادی نمایش داده نمیشه (اینکه چطور و چه چیزی از این حالت استفاده میکنه و تغییر میکنه رو پایین‌تر توضیح میدم)&lt;/li&gt;
  &lt;li&gt;یک تابعی رو تعریف کردم با اسم دلخواه &lt;code class=&quot;highlighter-rouge&quot;&gt;toggleState&lt;/code&gt; که قرار هست موقع کلیک کردن دکمه، فراخوانی بشه. کاری هم که انجام میده، خیلی ساده، استیت رو تغییر میده. کد نوشته شده شاید شما رو یکم سردرگم کنه. تعریف کد به این شکله: &lt;code class=&quot;highlighter-rouge&quot;&gt;isHidden: !this.state.isHidden&lt;/code&gt; و یعنی، مقدار جدید &lt;code class=&quot;highlighter-rouge&quot;&gt;isHidden&lt;/code&gt; برابر خواهد بود با هر آنچه که &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.isHidden&lt;/code&gt; بوده، اما چون یک &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; هم اولش آوردم، یعنی اون مقدار رو بر عکسش کن. پس اگر &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.isHidden&lt;/code&gt; برابر با &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; بود، مقدار جدیدش برابر با &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; میشه و برعکس.&lt;/li&gt;
  &lt;li&gt;چون یک دکمه هم به کامپوننت اضافه کردم، باید کل اِلِمان‌ها رو داخل یک اِلِمان اصلی و والد جا بدم. برای همین هم، تمام المان‌ها رو داخل یک &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; گذاشتم.&lt;/li&gt;
  &lt;li&gt;زمانی که کاربر روی دکمه کلیک میکنه، رویداد (Event) &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; اتفاق میوفته. اینجا بهش گفتم، زمانی که این رویداد اتفاق افتاد، تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;toggleState&lt;/code&gt; رو صدا بزنه. ضمنا از &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; هم استفاده کردم، چون دکمه‌ها در حالت عادی، رویدادها رو انجام نمیدن و بایند (Bind) موظف هست تا حالت اصلی شئی که بهش پاس داده میشه رو حفظ و برای تابع مربوطه ارسالش کنه. در این مورد بعدا بیشتر توضیح میدم.&lt;/li&gt;
  &lt;li&gt;و در نهایت، به المان &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; گفتم، تا مخفی بودن یا نبودنش رو از &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.isHidden&lt;/code&gt; بگیره. حالا، هر موقع که &lt;code class=&quot;highlighter-rouge&quot;&gt;isHidden&lt;/code&gt; تغییر کنه، المان &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; مجددا رِندِر میشه.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;برنامه رو تست کنید و ببینید که کارکردش چطوره. کارتون که تموم شد، میریم تا یکم دیگه با تئوری دست و پنجه نرم کنیم.&lt;/p&gt;

&lt;h2 id=&quot;درک-مفاهیم-ریاکت&quot;&gt;درک مفاهیم ری‌اکت&lt;/h2&gt;

&lt;p&gt;مهم‌ترین تفاوت کتاب‌خونه ری‌اکت با فرِیم‌وُرک‌هایی مثل انگولار، اینه که ری‌اکت فقط برای فرانت‌اند ساخته شده. در مورد ری‌اکت، چیزهای خیلی زیادی برای گفتن وجود داره. اما دوتا از ویژگی‌های اصلی ری‌اکت، داشتن مفاهیمی مثل Properties یا به طور خلاصه Prop و همچنین State هست که قبل‌تر کمی با مفهوم State آشنا شدیم. اینجا تصمیم دارم در مورد این دو و همچنین چرخه زندگی کامپوننت‌ها بیشتر توضیح بدم.&lt;/p&gt;

&lt;h3 id=&quot;props&quot;&gt;Props&lt;/h3&gt;

&lt;p&gt;پراپ‌ها در واقع راهی برای ارتباط بین کامپوننت‌ها و جز ویژگی‌های اونها هستند (هرجا که شما کلاس &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt; رو استفاده یا همون &lt;code class=&quot;highlighter-rouge&quot;&gt;extend&lt;/code&gt; کنید، میتونید ازشون بهره‌ ببرید). مهم‌ترین ویژگی پراپ‌ها، اینه که از سمت کامپوننت والد به فرزند منتقل میشن و اصطلاحا uni-directional (یک‌طرفه) هستن. زمانی هم وجود داره که شما مثل استِیت، پراپ‌های اولیه رو تعریف میکنید تا کامپوننت شما با اطلاعات اولیه (و نه حالات اولیه)، شروع به کار کنه. پراپ‌ها به شما کمک میکنن تا اطلاعات رو بین کامپوننت‌ها جابجا کنید، و زمانی که کاربر بخواد مستقیما روی خود کامپوننت تغییری اعمال کنه، باید از استیت استفاده بشه. بذارید با یک مثال ساده از پراپ استفاده کنیم:&lt;/p&gt;

&lt;p&gt;فرض کنید که توی کامپوننت &lt;code class=&quot;highlighter-rouge&quot;&gt;ThisIsAComponent&lt;/code&gt; از یک تگ هدر &lt;code class=&quot;highlighter-rouge&quot;&gt;h1&lt;/code&gt; استفاده میکردیم و قرار بود مقدار داخلش رو توسط کامپوننت والد تغییر بدیم. کد جدیدمون به این شکل میشد (فقط تابع رِندِر رو گذاشتم و مابقی کد دست‌نخورده باقی مونده):&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Change&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حالا باید مقداری رو برای &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; از کامپوننت والد، یعنی &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; در نظر بگیرم. کار آسونیه و به شکل زیر تغییری رو تو &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; ایجاد میکنم:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ThisIsAComponent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This is a new title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;state&quot;&gt;State&lt;/h3&gt;

&lt;p&gt;پراپ‌ها نباید تغییر کنن (به اصطلاح باید Immutable باشن)، برای همین از استیت استفاده میشه. در حالت عادی، کامپوننت‌ها استیت ندارن و از این جهت اصطلاحا بهشون Stateless گفته میشه. کامپوننت‌هایی که استیت پیدا میکنن، بهشون Stateful میگن.&lt;/p&gt;

&lt;p&gt;کاربرد استیت برای اینه که کامپوننت بتونه اطلاعاتی که در هر بازسازی دریافت میکنه رو حفظ کنه. زمانی که شما از &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState()&lt;/code&gt; استفاده میکنید، وضعیت کامپوننت بروزرسانی و مجددا بازسازی میشه. تمام این فرایند بازسازی توسط ری‌اکت اتفاق می‌افته و خیلی هم سریعه.&lt;/p&gt;

&lt;p&gt;پراپ و استیت خیلی شبیه به هم هستند و تقریبا کار مشابهی رو انجام میدن، اما برای کارهای متفاوتی ازشون استفاده میشه. این امکام وجود داره تا خیلی از کامپوننت‌های شما Stateless باشن.&lt;/p&gt;

&lt;h3 id=&quot;چرخه-زندگی-کامپوننتها-component-lifecycle&quot;&gt;چرخه زندگی کامپوننت‌ها (Component Lifecycle)&lt;/h3&gt;

&lt;p&gt;کامپوننت‌ها به شما کمک میکنن تا یو‌آی (UI) رو به تیکه‌های کوچکتر تقسیم کنید. در حالت کلی، شما کامپوننت‌ها رو به شکل کلاس‌های جاوااسکریپت تعریف میکنید:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Greeting&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اما کامپوننت‌ها صرفا جهت نمایش ساخته نمیشن و کارهای بیشتری میشه باهاشون انجام داد. اصطلاحا هر کامپوننتی برای خودش یک چرخه‌زندگی بخصوص یا Lifecycle داره که چندتا از پر کاربردترین‌ها رو توضیح میدم:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor()&lt;/code&gt; که دقیقا قبل از بارگذاری کامپوننت توسط ری‌اکت خونده میشه. بهترین استفادش، تعریف &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; اولیه کامپوننت هست. اگر کامپوننت stateless باشه، نیازی به تعریف این تابع نیست.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillMount()&lt;/code&gt; دقیقا قبل از بارگذاری خونده میشه. و قبل از تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; اتفاق میوفته. به همین خاطر تعریف استیت تو این تابع پیشنهاد نمیشه. این تابع سمت سرور کارهاش رو انجام میده و اصطلاحا server-side هست. (در این مورد تو بخش &lt;a href=&quot;https://virgool.io/d/uzcgpsjoceof/edit#universal-isomorphic-apps&quot;&gt;Isomorphism&lt;/a&gt; توضیح میدم)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt; بعد از اینکه کامپوننت بارگذاری شد، خونده میشه. این تابع بهترین جا برای ارسال درخواست‌ها به سرور شماست و اگر استیت رو تو این تابع با استفاده از تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState()&lt;/code&gt; تغییر بدید، باعث میشید که باز دوباره تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; فراخوانی بشه&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillReceiveProps(nextProps)&lt;/code&gt; زمانی فراخوانی میشه، که شما از طریق کامپوننت والد، پراپ‌های کامپوننت فرزند رو تغییر بدید و بخواید استیت جدید رو بر اساس پراپ‌های جدید تنظیم کنید. برای اینکار میتونید آرگومان‌های &lt;code class=&quot;highlighter-rouge&quot;&gt;nextProps&lt;/code&gt; و &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; رو با هم مقایسه کرده و تغییرات رو ایجاد کنید. (مقایسه رو حتما انجام بدید!)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUpdate(nextProps, nextState)&lt;/code&gt; قبل از بارگذاری مجدد رخ میده، اگر پراپ‌ها و استیت‌های کامپوننت تغییری کرده باشن.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate(prevProps, prevState)&lt;/code&gt; بلافاصله بعد از بارگذاری مجدد اتفاق میوفته و به شما این امکان رو میده تا المان‌ها رو دستکاری کنید.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidCatch(error, info)&lt;/code&gt; برای مدیریت اِرورها و خطاها تو UI استفاده میشه.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/react-component.html&quot;&gt;مطالعه بیشتر…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;جمعبندی&quot;&gt;جمع‌بندی&lt;/h3&gt;

&lt;p&gt;پراپها استفاده میشن تا اطلاعات از کامپوننت والد به کامپوننت فرزند یا حتی داخل کامپوننت فرزند منتقل بشن. پراپ‌ها تغییرناپذیر یا به اصطلاح Immutable هستند و نباید در هر رندر تغییر کنند.&lt;/p&gt;

&lt;p&gt;استیت برای این استفاده میشه تا اطلاعات رو تغییر بدیم، یا اطلاعات تغییر یافته رو نمایش بدیم و اصطلاحا تغییر پذیر یا Mutable هستند. مثلا کاربر چیزی رو در سایت سرچ میکنه و بلافاصله زیرش تعدادی از نزدیک‌ترین نتایج جست‌وجو نمایش داده میشه.&lt;/p&gt;

&lt;h1 id=&quot;مفهوم-isomorphic-یا-universal&quot;&gt;مفهوم Isomorphic یا Universal&lt;/h1&gt;

&lt;p&gt;زمانهای قدیم، قبل از موقعی که NodeJS بین برنامه‌نویس‌ها محبوب بشه، جاوااسکریپت زبانی بود که باهاش تغییراتی رو تو صفحه‌های وب ایجاد میکردن تا صفحه‌ها از حالت مرده و استاتیک خارج بشن. تا اون موقع زبان جاوااسکریپت، زبانی بود که تو مرورگر کاربر اجرا میشد و به اصطلاح Client Side یا سمت کاربر بود. بعد از ظهور NodeJS جاوااسکریپت این قابلیت رو پیدا کرد که تو محیط سمت سرور هم اجرا بشه و بعد از اون جاوااسکریپت به یک زبان Server Side هم تبدیل شد.&lt;/p&gt;

&lt;p&gt;ایزومورفیزم (Isomorphism) از ریاضیات گرفته شده و «هم‌سان» معنی میشه. چون واژه ایزومورفیک برای برنامه‌نویس‌ها کمی مشکل‌ساز میتونه باشه، به جاش از واژه یونیورسال (Universal) هم استفاده میکنن.&lt;/p&gt;

&lt;p&gt;ایزوموفیک در شاخه وب، به معنی ساخته شدن صفحه سمت سرور یا سمت کاربر هست و در حالت کلی به NodeJS و خود JavaScript اشاره میکنه. برای اینکه تعریف رو ساده‌تر کنم، اینطور در نظر بگیرید که، کدی که سمت سرور ساخته شده، به صورت HTML به کاربر ارسال میشه و کاربر میتونه تو کد صفحهش اون رو ببینه. اما کدی که سمت کاربر ساخته میشه، تو کدهای صفحه قابل مشاهده نیست. اینجا لازم هست که به این نکته اشاره کنم، که منظور از سرور، الزاما بک‌اند نیست، و اونچه که مد نظر هست، ابزاریه که وظیفه تبادل ارتباطات رو به عهده داره.&lt;/p&gt;

&lt;p&gt;دلایل مختلفی وجود دارن که برنامه‌نویس‌ها به اپ‌های ایزومورف علاقه‌مندند:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;بهبود سئو،&lt;/li&gt;
  &lt;li&gt;پرفورمنس بهتر،&lt;/li&gt;
  &lt;li&gt;و نگهداری راحت‌تر.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;یکی از مضوعاتی که خیلی در این مورد مهم هست، اینه که کد‌های ایزومورفیک که سمت کاربر ساخته شدن، توسط موتورهای جست‌وجو به خوبی خونده نمیشن، برای همین هم اپ‌های SPA معمولا با این ساختار دچار مشکل میشن و لازم هست تا کدشون سمت سرور ساخته بشه. (سرور رو الزاما با کامپیوتر سرور اشتباه نگیرید!)&lt;/p&gt;

&lt;h1 id=&quot;promise-و-درک-ناهمگامسازی-asynchronous&quot;&gt;Promise و درک ناهم‌گام‌سازی (Asynchronous)&lt;/h1&gt;

&lt;p&gt;بیاید با هم یه دنیای جالبی رو تجسم کنیم، تو این دنیای ما، هنوز گوگل وجود نداره و شما رئیس یک شرکت «پاسخ به سوالات» هستید. نحوه کار به این شکله که کاربر سوال خودش رو بسته‌بندی میکنه (Data Package) و اون رو به یک پست‌چی میده، پست‌چی این بسته رو میاره برای شرکت شما (Request) و شما بسته رو باز میکنید، به سوال جواب میدید و اون رو به پست‌چی میدید و ایشون هم برای کاربر جواب رو میبره (Response). پروسه تا اینجا واضحه فقط چند شرط وجود داره:&lt;/p&gt;

&lt;p&gt;از اونجایی که شرکت ما خیلی خاصه :دی،&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;کاربر زمانی که بسته رو به پست‌چی میده، باید دم در خونه صبر کنه تا پست‌چی برگرده (و از کار و زندگیش هم می‌افته)&lt;/li&gt;
  &lt;li&gt;پستچی تا زمانی که شما پاسخ رو بسته‌بندی نکردید و بهش تحویل ندادید پیش شما میمونه.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;این روش ارتباط، روش هم‌گام یا اصطلاحا Synchronous نام داره و همون روش قدیمیه کار با اینترنته، کد PHP مینوشتیم و با هربار کلیک رو دکمه، کاربر باید منتظر صفحه جدید میموند و نمیتونست کارهای دیگه توی سایت رو انجام بده.&lt;/p&gt;

&lt;p&gt;حالا شرکتمون رو کمی پیشرفته‌تر میکنیم، فرایند همون شکل قبلی رو داره اما:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;زمانی که کاربر درخواستش رو بسته‌بندی کرد و به پست‌چی داد، برمی‌گرده خونش و کارهاش رو انجام میده&lt;/li&gt;
  &lt;li&gt;شما فقط یک پست‌چی ندارید و پست‌چی‌ها میتونن از کاربر درخواست‌های مختلفی رو بگیرن و برای شما بیارن&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;این نوع ارتباط، ارتباط نا‌هم‌گام یا Asynchronous نام داره و خیلی تو وب‌اپ‌های SPA پر کاربرده و AJAX یکی از معروف‌ترین تکنیک‌ها برای برقراری این نوع ارتباطهاست. تو نسخه‌های جدید جی‌اس، برای اینکه کاربر رو منتظر نذاریم بعد از اینکه درخواستش رو ارسال کرد، &lt;strong&gt;بهش قول میدیم که در آینده جوابی رو برای درخواستش ارسال میکنیم&lt;/strong&gt;، و کاربر میتونه به کارش ادامه بده و ماهم پردازشمون رو انجام میدیم. اینجاست که پرامِس (پرامیس؟) یا همون Promiseها خودشون رو نشون میدن.&lt;/p&gt;

&lt;p&gt;قبل از معرفی شدن پرامس‌ها، تو جاوااسکریپت از Callbackها استفاده میشد، کال‌بک‌ها توابعی بودن که مثلا به عنوان آرگومان یک تابع دیگه تعریف میشدن، تا هنگام بُروز یک رویداد خاص (Event) کار خاصی رو هم انجام بدن. مشکل اینجا بود که ایده‌ی کال‌بک‌ها، هرچقدر هم که قشنگ بوده، تو پردازش‌های پیچیده مدیریت کد رو خیلی سخت میکرده و به اصطلاح، برنامه‌نویس رو وارد جهنم کالبَک‌ها یا همون Callback-Hell میکرده. برای همین پرامس‌ها ساخته شدند تا جایگزینی برای کال‌بک‌ها باشن.&lt;/p&gt;

&lt;p&gt;پرامس‌ها یا جوابی رو برمیگردونن یا اینکه دلیلی رو برای عدم انجام موفقیت‌آمیز اون فرایند ارائه میدن. از اینجا میشه گفت که پرامس‌ها ساختار مشابهی مثل &lt;code class=&quot;highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; دارن و از همه مهمتر، سه وضعیت کلی رو شامل میشن:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Pending&lt;/strong&gt;: که یعنی در حال انجام کاری هستند،&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;fulfilled&lt;/strong&gt;: که یعنی کارشون رو به خوبی انجام دادن و&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;rejected&lt;/strong&gt;: که یعنی از پس کاری که بهشون داده شده بر نیومدن.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;یه مثال ساده برای اینکه با نمونه‌ای از یک پرامس آشنا بشید به این شکله:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اینجا، تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; صبر میکنه تا کار تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; تموم بشه، بعد تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt; منتظر &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; میمونه و اگر هرکدوم از این توابع جایی به مشکل خوردند، تابه &lt;code class=&quot;highlighter-rouge&quot;&gt;handleErrors&lt;/code&gt; وظیفش رو انجام میده.&lt;/p&gt;

&lt;p&gt;اگر هرکدوم از این توابع، پرامس باشن، میتونن ساختار مشابهی رو برای خودشون بگیرن، در واقع این قابلیت رو به شما میدن تا بتونید پرامس‌ها رو تودرتو کنید.&lt;/p&gt;

&lt;h2 id=&quot;استفاده-از-fetch&quot;&gt;استفاده از fetch&lt;/h2&gt;

&lt;p&gt;حالا که متوجه مفهوم ایزومورفیک و همچنین درخواست‌های نا‌همگام شدید، بریم تا با یه مثال تو پروژمون به درک بیشتری ازشون برسیم.&lt;/p&gt;

&lt;p&gt;قدم اول، نصب کتابخونه &lt;code class=&quot;highlighter-rouge&quot;&gt;isomorphic-fetch&lt;/code&gt; از مخازن npm هست. &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; یکی از کتابخونه‌های مورد علاقه‌ی من که در کنارش کتابخونه &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt; وجود داره. تفاوت عمده این دو کتابخونه، تو پردازش اطلاعات هست و اکسیوس برای ای‌اس۶ آمادگی بیشتری داره، منتهی من طبق عادت پیش میرم و از فِچ (fetch) استفاده میکنم.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; isomorphic-fetch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;کتابخونه رو نصب کنید، اینکه واژه ایزومورفیک اولش استفاده شده، نشون میده که این کتابخونه رو، هم میشه سمت سرور و هم سمت کاربر استفاده کرد. حالا، کامپوننت &lt;code class=&quot;highlighter-rouge&quot;&gt;ThisIsAComponent&lt;/code&gt; رو یکمی تغییر میدیم. در نهایت کدمون باید به شکل زیر بشه:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;isomorphic-fetch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThisIsAComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://jsonplaceholder.typicode.com/posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Loading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;خط به خط بریم جلو ببینیم چه اتفاقی افتاده:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;اول، از کتابخونه &lt;code class=&quot;highlighter-rouge&quot;&gt;isomorphic-fetch&lt;/code&gt; شئ &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; رو فراخوانی کردم.&lt;/li&gt;
  &lt;li&gt;تو تابع constructor، استیت اولیه رو تغییر دادم و به جای &lt;code class=&quot;highlighter-rouge&quot;&gt;isHidden&lt;/code&gt; که اول داشتیم، &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; رو، که وظیفه نگهداری از وضعیت بارگذاری آیتم‌ها رو به عهده داره و &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; که نگهدارنده آیتم‌های دریافت شده از سرور هستند رو ساختم.&lt;/li&gt;
  &lt;li&gt;تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;toggleState&lt;/code&gt; رو پاک کردم و به جاش از &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchData&lt;/code&gt; استفاده کردم. اسمش رو هم خودم انتخاب کردم. داخل این تابع اتفاقات جالبی میوفته.&lt;br /&gt;
زمانی که این تابع خونده میشه (یا در واقع رو دکمه‌ای کلیک میشه که باید این تابع رو اجرا کنه) وضعیت &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; به &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; تغییر پیدا میکنه. چون در حقیقت آیتمی دریافت و کار ما هم تموم نشده.&lt;br /&gt;
قدم بعدی، از &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; استفاده کردم تا از یک آدرس پیش‌فرض، یک‌سری اطلاعات الکی رو دریافت کنم. نکته مهم اینه که &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; یک پرامس هست و وضعیتش رو میشه کنترل کرد. برای همین، تو خط پایینش گفتم، هر موقع که دریافت اطلاعات تموم شد، از اطلاعات دریافت شده که اسمشون رو &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; گذاشتم استفاده کن و…&lt;/li&gt;
  &lt;li&gt;یکی از مهم‌ترین تفاوت‌های &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; و &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt; تو این مرحلست، پاسخی که &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; به شما برمیگردونه، یک پاسخ خام هست و باید تبدیل به دیتای قابل خوندن بشه. &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; این کار رو با برگردوندن یک پرامس انجام میده (برای نوشتن توابع از &lt;a href=&quot;https://virgool.io/d/uzcgpsjoceof/edit#arrow-functions&quot;&gt;Arrow Functionها&lt;/a&gt; استفاده کردم). پس گفتم، زمانی که جواب رو از سرور گرفتی، اون رو به &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; تبدیل کن (که خود تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; یک پرامس برمیگردونه) و بعد از اینکه عمل تبدیل به &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; درست انجام شد، از حاصلش استفاده کن تا دوباره استیت رو تغییر بدی.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; رو هم برابر با &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; کردم تا نشون بدم عمل دریافت اطلاعات کامل شده. در نهایت نتیجه حاصل از دریافت اطلاعات، یا همون آیتم‌های مورد نظرم رو، که حالا تبدیل به &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; شدند، داخل &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; استیت ذخیره کردم.&lt;br /&gt;
اینکار باعث میشه که ری‌اکت، یکبار دیگه کامپوننت‌هایی که از این استیت استفاده میکنن رو بارگذاری کنه. در نهایت هم بررسی میکنه که آیا اشکالی وجود داشته تو کل این فرایند یا نه.&lt;/li&gt;
  &lt;li&gt;آخر سر، تو تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; دکمه Get Data رو به تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchData&lt;/code&gt; وصل کردم. یک تگ &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; هم اضافه کردم که بهش گفتم، وضعیت &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt; بودنش رو از &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; موجود تو استیت بگیره. (هر موقع که بارگذاری تموم شده بود، این المان محو میشه و هرموقع بارگذاری در حال انجام بود، این المان نمایش داده میشه)&lt;/li&gt;
  &lt;li&gt;داخل المان &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; که به جای &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; نشسته، با استفاده از تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; که شکل جدیدی از &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; هست، آیتم‌ها رو نمایش دادم. (پایین‌تر درمورد &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; توضیحات بیشتری میدم)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/Fy2S8J&quot;&gt;ادامه مطلب در سایت خودم…&lt;/a&gt;&lt;/p&gt;</content><author><name>آیین سعیدی</name></author><category term="reactjs" /><category term="nextjs" /><category term="redux" /><category term="redux-thunk" /><summary type="html">عمیق‌تر در مورد جاوااسکریپت، ری‌اکت و نکست‌جی‌اس بدونیم</summary></entry><entry><title type="html">مروری بر MySQL Triggers</title><link href="http://pullrequest.ir/MySQL-Triggers/" rel="alternate" type="text/html" title="مروری بر MySQL Triggers" /><published>2018-05-21T00:00:00+00:00</published><updated>2018-05-21T00:00:00+00:00</updated><id>http://pullrequest.ir/MySQL-Triggers</id><content type="html" xml:base="http://pullrequest.ir/MySQL-Triggers/">&lt;p&gt;&lt;img src=&quot;https://files.virgool.io/upload/users/3676/posts/hohqrcxydcrt/ek4abnc9bhed.png&quot; alt=&quot;MySQL&quot; title=&quot;MySQL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trigger:&lt;/p&gt;

&lt;p&gt;تریگرها به مجموعه‌ای از توابع/دستوراتی اطلاق میشه که با انجام کاری اجرا میشوند ، یعنی اگر تریگری داشته باشیم برای اجرا قبل از Insert در جدول X این تریگر هنگامیکه بخواهیم یک داده رو با کوئری Insert وارد جدولمون کنیم اجرا خواهد شد.
کار با تریگرها ساده ولی کاربردی هستند.
یک مثال کاربردی:
فرض میکنیم برای یک فروشگاه اینترنتی دیتابیسی رو میخواهیم طراحی کنیم که دارای 2 جدول برای ذخیره‌ی مشتری و اعتبارپنلش و دیگری برای نگهداری اطلاعات هر خرید مشتری باشد.
عملی که رخ میدهد به شرح زیر است:
هنگامیکه مشتری اقدام به خرید نمود مبلغ هر خرید از اعتبار کاربری مشتری کسر شود.&lt;/p&gt;

&lt;p&gt;Customers&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;id: شناسه مشتری&lt;/li&gt;
  &lt;li&gt;name:نام مشتری&lt;/li&gt;
  &lt;li&gt;credit:اعتبار مشتری&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE `customers` ( 
	 `id` INT UNSIGNED NOT NULL AUTO_INCREMENT ,
	`name` VARCHAR(20) NOT NULL , 
	`credit` INT NOT NULL , 
	 PRIMARY KEY (`id`)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Baskets&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;id:شناسه خرید&lt;/li&gt;
  &lt;li&gt;customer_id:شناسه خریدار/مشتری&lt;/li&gt;
  &lt;li&gt;amount: قیمت سبد خرید&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE `baskets` ( 
	`id` INT UNSIGNED NOT NULL AUTO_INCREMENT ,
	`customer_id` INT UNSIGNED NOT NULL ,
	`amount` INT UNSIGNED NOT NULL ,
	PRIMARY KEY (`id`)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(برای خلاصه سازی از مابقی جزئیات همچون ریلیشن ها فاکتور میگیریم)
حالا یک تریگر مینویسیم که بعد از ثبت هر خرید مبلغ خرید amount را از اعتبار حساب مشتری credit کم کند.
برای تست یک مشتری به صورت زیر تعریف میکنیم:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO `customers` (`id`, `name`, `credit`) VALUES (NULL, 'Mahmoud', '1000000');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اگر از تریگر استفاده نمیکردیم میبایست بعد از درج هر خرید به صورت دستی کوئری زیر را اجرا میکردیم&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UPDATE `customers` 
    SET `customers`.`credit`=`customers`.`credit` -  $BasketAmount
    WHERE `customers`.`id` = $CustomerId;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حال این کوئری رو در تریگر After Insert جدول خریدها قرار میدهیم که بعد از اعمال هر خرید خودکار این کار را انجام دهد:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TRIGGER `MyExampleName` AFTER INSERT ON `baskets`
FOR EACH ROW BEGIN
    UPDATE `customers` 
        SET `customers`.`credit`=`customers`.`credit` - NEW.`amount` 
        WHERE `customers`.`id` = NEW.`customer_id`;
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;دستور بالا تریگری رو تعریف میکنه که بعد از ورود داده در جدول baskets کوئری Update میگیره روی جدول مشتریها و با&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`customers`.`credit`=`customers`.`credit` - NEW.`amount`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;مبلغ خرید رو از حساب مشتری کم میکنه و برای پیدا کردن مشتری از کاندیشن&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; WHERE `customers`.`id` = NEW.`customer_id`;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;استفاده میکنیم که مشتری مربوط به خریدمون رو پیدا کنه و کوئری رو روش اجرا کنه.&lt;/p&gt;

&lt;p&gt;اگر بخواهیم از دستورات چند خطی و یا چند دستور در تریگر استفاده کنیم نیاز هست که از BEGIN  و END برای مشخص کردن ابتدا و انتهای دستورات استفاده کنیم در غیر اینصورت استفاده از اونها برای کوئریهای تک دستوری الزامی نیست.
با  NEW.نام ستون  میتونیم داخل تریگیر به مقادیر ستونهای اون رکوردی که تریگر داره روش اجرا میشه میتونیم دسترسی پیدا کنیم.
البته در تریگرهای آپدیت هم به NEW و هم به OLD دسترسی داریم که مقادیر قدیم و جدید هر ستون رو بر میگردونن و در تریگر حذف هم فقط به OLD.نام_ستون دسترسی داریم.
به طور کلی&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TRIGGER `نام دلخواه` AFTER INSERT ON `نام جدول`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;برای ساخت یک تریگر از اسلوب فوق استفاده میکنیم که برای تعیین زمان/نوع تریگر میتونیم از:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AFTER INSERT&lt;/li&gt;
  &lt;li&gt;BEFORE INSERT&lt;/li&gt;
  &lt;li&gt;AFTER UPDATE&lt;/li&gt;
  &lt;li&gt;BEFORE UPDATE&lt;/li&gt;
  &lt;li&gt;AFTER DELETE&lt;/li&gt;
  &lt;li&gt;BEFORE DELETE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;که از اسامی آنها مشخص هست برای چه رخدادی تعریف میشوند و واضح هستش نیازی به ترجمه هم نداره!
دستورات شرطی مثل تعریف متغیرهای DECLARE و دستورات شرطی IF THEN/ELSE و حلقه ها و سایر دستورات برنامه نویسی یا کوئری نویسی رو میشه داخل تریگر اجرا کرد.&lt;/p&gt;

&lt;p&gt;اگر موقع ثبت کوئری ساخت تریگر دچار مشکل شدید به خاطر این هستش که جدا کننده‌ی زبانSQL پیشفرض سمی‌کالن هستش که با سمیکالن داخل دستورات دچار تداخل میشه که برای جلوگیری از این اتفاق باید Delimiter کوئری رو از حالت پیشفرض به یک چیز دیگه مثلاً $$ تغییر بدید.
مثل:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELIMITER $$;
Trigger Query 
$$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;که سیمکالن با این روش دور میخوره و خطا نمیده.&lt;/p&gt;

&lt;p&gt;منتظر فیدبکهاتون هستم.&lt;/p&gt;</content><author><name>محمود اسکندری</name></author><category term="mysql" /><category term="database" /><category term="دیتابیس" /><summary type="html"></summary></entry><entry><title type="html">ری‌اکت برای تازه‌کارها - بخش یک</title><link href="http://pullrequest.ir/%D8%B1%DB%8C-%D8%A7%DA%A9%D8%AA-%D8%A8%D8%B1%D8%A7%DB%8C-%D8%AA%D8%A7%D8%B2%D9%87-%DA%A9%D8%A7%D8%B1%D9%87%D8%A7-%D8%A8%D8%AE%D8%B4-%DB%8C%DA%A9/" rel="alternate" type="text/html" title="ری‌اکت برای تازه‌کارها - بخش یک" /><published>2018-04-25T00:00:00+00:00</published><updated>2018-04-25T00:00:00+00:00</updated><id>http://pullrequest.ir/%D8%B1%DB%8C%E2%80%8C%D8%A7%DA%A9%D8%AA%20%D8%A8%D8%B1%D8%A7%DB%8C%20%D8%AA%D8%A7%D8%B2%D9%87%E2%80%8C%DA%A9%D8%A7%D8%B1%D9%87%D8%A7%20-%20%D8%A8%D8%AE%D8%B4%20%DB%8C%DA%A9</id><content type="html" xml:base="http://pullrequest.ir/%D8%B1%DB%8C-%D8%A7%DA%A9%D8%AA-%D8%A8%D8%B1%D8%A7%DB%8C-%D8%AA%D8%A7%D8%B2%D9%87-%DA%A9%D8%A7%D8%B1%D9%87%D8%A7-%D8%A8%D8%AE%D8%B4-%DB%8C%DA%A9/">&lt;p&gt;اگر در یک سال اخیر در مورد تکنولوژی‌های وب مطالعه کردید، پس احتمالا با فریم‌ورک &lt;a href=&quot;https://reactjs.org&quot;&gt;React&lt;/a&gt; در حد خوبی آشنایی دارید. یکی از شکایت‌هایی که تازه واردان در مورد ری‌اکت می‌کنند اینه که «چرا اینقدر شروع و ساخت یک پروژه باهاش دنگ و فنگ داره؟» که خب البته راه‌های زیادی برای فائق اومدن بر این پیچیدگی‌ها ارائه شده.&lt;/p&gt;

&lt;p&gt;اولین راه استفاده از یک CDN هست. شما می‌تونید فقط لینک یک تگ &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; رو توی فایل HTML تون کپی کنید و بعدش از ری‌اکت استفاده کنید.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react-dom.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.21.1/babel.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;خب البته انگار یک تگ نیست :)) حقیقتا سه تا تگ هست.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;اولین تگ، برای وارد کردن خود react.&lt;/li&gt;
  &lt;li&gt;دومی react-dom که رندر کردن کدهامون توی مرورگر بهش نیاز داریم.&lt;/li&gt;
  &lt;li&gt;سومی هم &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel&lt;/a&gt; هست. babel یک ترنسپایلر (&lt;em&gt;transpiler&lt;/em&gt;) هست که وظیفه داره کد ES6 و ES7 ما رو به ES5 قابل فهم برای مرورگر تبدیل کنه. با استفاده از Babel ما می‌تونی کدمون رو با آخرین استانداردها (از جمله استانداردهای React مثل JSX) بنویسیم و نگران این نباشیم که مرورگرهای قدیمی نمی‌تونن اون رو اجرا کنن.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/babel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pullrequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حالا می‌تونیم کدهای ری‌اکتمون رو مثل مثال بالا توی یک تگ اسکریپت (که البته باید ویژگی typeاش رو برابر با «text/babel» قرار بدیم)  بنویسیم و برنامه رو اجرا کنیم:&lt;/p&gt;
&lt;p data-height=&quot;294&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;zjBWXZ&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;mehrad77&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;استفاده از ری‌اکت با سی‌دی‌ان&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/mehrad77/pen/zjBWXZ/&quot;&gt;استفاده از ری‌اکت با سی‌دی‌ان&lt;/a&gt; by Mehrad (&lt;a href=&quot;https://codepen.io/mehrad77&quot;&gt;@mehrad77&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;اما خب اینجوری کلی از امکاناتی که کار با ری‌اکت رو راحت‌تر و کارامد می‌کنه رو از دست می‌دید و خوب نیست که یک پروژه بزرگ رو به این شکل پیش ببریم.&lt;/p&gt;

&lt;p&gt;راه مناسب‌تر استفاده از ابزارهایی مثل &lt;a href=&quot;https://webpack.js.org&quot;&gt;Webpack&lt;/a&gt; و &lt;a href=&quot;https://www.npmjs.com&quot;&gt;NPM&lt;/a&gt; هست تا خیلی شیک و راحت بتونید از همه‌ی امکانات پیشرفته و کارآمدی که ازشون حرف زدیم استفاده کنید، اما باز برگشتیم سر خونه اول :) راه اندازی و استفاده از &lt;a href=&quot;https://webpack.js.org&quot;&gt;وب‌پک&lt;/a&gt; برای یک تازه کار واقعا کار آسونی نیست.&lt;/p&gt;

&lt;p&gt;من می‌خوام در این مجموعه نوشته، راهکاری بهتون معرفی کنم که بتونیم این سختی نصب و تنظیم Webpack / Babel  / NPM / React رو آسون کنیم. اسم این ابزار &lt;a href=&quot;https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&quot;&gt;create-react-app&lt;/a&gt; است.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;نوشته‌ای که مشفول خواندن آن هستید برداشتی آزاد از نوشته‌ای از &lt;a href=&quot;https://medium.com/in-the-weeds/learning-react-with-create-react-app-part-1-a12e1833fdc&quot;&gt;براندون ریچی&lt;/a&gt; است.  می‌تونید برای خواندن مقاله به زبان اصلی، به پیوند مراجعه کنید.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;مخاطبین-این-آموزش&quot;&gt;مخاطبین این آموزش&lt;/h1&gt;

&lt;p&gt;این مقاله آموزشی به درد افرادی می‌خوره که  با نصب و استفاده nodejs / npm آشنایی نسبی و  پیش‌زمینه‌ای در Javascript و CSS دارند. همچنین اگر شما با ری‌اکت آشنایی دارید، احتمالا چیز زیادی از (حداقل این قسمت) این آموزش یاد نخواهید گرفت.&lt;/p&gt;

&lt;p&gt;اگر nodejs یا npm را روی دستگاه نصب ندارید می‌تونید روش‌های نصب و استفاده رو از https://nodejs.org دنبال کنید.
اگر جاوااسکریپت بلد نیستید هم می‌تونید از طریق &lt;a href=&quot;https://sokanacademy.com/courses/javascript/%D8%A2%D9%85%D9%88%D8%B2%D8%B4-%D8%AC%D8%A7%D9%88%D8%A7%D8%A7%D8%B3%DA%A9%D8%B1%DB%8C%D9%BE%D8%AA&quot;&gt;دوره آموزشی جاوااسکریپت سایت سکان آکادمی&lt;/a&gt;، کلیات این زبان رو فرا بگیرید.&lt;/p&gt;

&lt;p&gt;برای بهره وری از ری‌اکت در بهتری حالت بهتره که به &lt;a href=&quot;https://medium.com/quick-code/the-best-tutorials-to-learn-ecmascript-es6-for-beginners-55fe602382cd&quot;&gt;استاندارد ES6 هم مسلط باشید&lt;/a&gt;، هرچند که من هر جا نیاز باشه اشاره‌ای بهش خواهم کرد، اما اگه با ES6 آشنا نباشید ممکنه گیج بشید.&lt;/p&gt;

&lt;h1 id=&quot;وبپک&quot;&gt;وب‌پک&lt;/h1&gt;
&lt;p&gt;وب پک (webpack) یک &lt;a href=&quot;https://medium.freecodecamp.org/javascript-modules-part-2-module-bundling-5020383cf306&quot;&gt;ماژول باندلر&lt;/a&gt; قدرتمند برای برنامه های مدرن جاوا اسکریپته. وقتی وب‌پک برنامه شما را پردازش می کنه، یک گراف وابستگی از هر ماژولی که برنامه شما نیاز دارد، می‌سازه، سپس تمام اون‌ها را توی فایل‌های باندل کوچکی قرار می‌ده که توسط مرورگر لود می‌شن. وب‌پک کارهایی دیگه‌ای مثل ترنسپایل کردن ماژول‌ها، بسته بندی ماژول‌ها، Minify کردنشون و … رو هم انجام می‌ده.
برای آشنایی بیشتر با وب‌پک می‌تونید ویدیوی زیر رو مشاهده کنید:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/nfmvexyoHXE?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;حالا-create-react-app-چیه&quot;&gt;حالا create-react-app چیه؟&lt;/h2&gt;
&lt;p&gt;ابزار create-react-app &lt;strong&gt;( که از حالا به بعد به شکل خلاصه بهش می‌گم &lt;em&gt;CRA&lt;/em&gt;)&lt;/strong&gt; راه‌حلی برای آسون کردنِ پیچیدگی شروع ساخت یک پروژه ری‌اکته. مجموعه‌ای از پیش‌آماده  از ابزارهایی مثل &lt;a href=&quot;https://webpack.js.org&quot;&gt;Webpack&lt;/a&gt; و &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel&lt;/a&gt; و &lt;a href=&quot;https://reactjs.org&quot;&gt;React&lt;/a&gt; است که کمک می‌کنه با یک دستور، یک محیط فوق‌العاده و آماده داشته باشید که بتونید شروع به استفاده از ری‌اکت کنید و وقتتون رو صرف تنظیم و نصب این ابزارها نکنید.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image.ibb.co/hn9cEH/twt_react3.jpg&quot; alt=&quot;اگه می‌خواهید پیچیدگی توصیف شده رو درک کنید، این توییت کمکتون می‌کنه&quot; /&gt;&lt;/p&gt;

&lt;p&gt;البته این آماده سازی و قبول کردن مسئولیت تمام تنظیمات پروژه باعث نمی‌شه که CRA فقط به درد تازه‌کارها بخوره. در حقیقت CRA یک دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;eject&lt;/code&gt; داره که باعث می‌شه هر وقت که دیگه نیازی به تنظیمات اولیه نداشتید پروژه رو از دستش بگیرید و CRA رو از برنامه‌تون خارج کنید تا هر جور که دلتون خواست ادامه بدید.&lt;/p&gt;

&lt;h1 id=&quot;نصب-cra&quot;&gt;نصب CRA&lt;/h1&gt;
&lt;p&gt;با در نظر گرفتن اینکه شما از قبل npm را نصب کرده‌اید، می‌توانید با دستور زیر این ابزار رو نصب کنیم:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; create-react-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;یا اگه به جای npm از &lt;a href=&quot;https://medium.com/@nikjohn/facebooks-yarn-vs-npm-is-yarn-really-better-1890b3ea6515&quot;&gt;yarn&lt;/a&gt; استفاده می‌کنید (که &lt;a href=&quot;https://www.sitepoint.com/yarn-vs-npm/&quot;&gt;پیشنهاد&lt;/a&gt; می‌کنم این کار رو کنید)، می‌تونید با دستور زیر به شکل گلوبال این ابزار رو نصب کنید:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn global add create-react-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;برای اینکه امتحان کنیم که به شکل درست نصب شد یا نه، می‌تونیم از دستور زیر استفاده کنیم:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;create-react-app &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
	create-react-app version: 1.4.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;ساخت-یک-پروژه-ریاکت-با-آن&quot;&gt;ساخت یک پروژه ری‌اکت با آن&lt;/h1&gt;
&lt;p&gt;اگر نام پروژه شما hello-world باشد، ساخت یک پروژه به سادگی زیر است:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;create-react-app hello-world

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Success! Created hello-world at .../dev/create-react-app/hello-world
Inside that directory, you can run several commands:
yarn start
    Starts the development server.
yarn build
    Bundles the app into static files &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;production.
yarn &lt;span class=&quot;nb&quot;&gt;test
    &lt;/span&gt;Starts the &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;runner.
yarn eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;this, you can’t go back!
We suggest that you begin by typing:
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hello-world
  yarn start
Happy hacking!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;راهنمایی که در انتها چاپ می‌شه خیلی مهمه. چهار دستور مهمی که توی این ابزار استفاده می‌شه عبارت است از start، build، test و eject. 
با اینکه در خروجی نصب توضیحات مناسبی ارائه شده اما بیایید یه بار دیگه اون‌ها رو مرور کنیم:&lt;/p&gt;

&lt;h1 id=&quot;yarn-start&quot;&gt;&lt;strong&gt;yarn start&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;این دستور باعث می‌شه این ابزار یک وب‌سرور کوچولو راه‌اندازی کنه که پروژه‌تون رو توی مرورگر بهتون نشون بده. این دستور یک وب سرور مخصوص توسعه محلی توی آدرس http://localhost:3000 براتون می‌سازه که می‌تونید شمای پروژه رو ببینید و با هر تغیری که توی کدتون بدید، به شکل خودکار سرور رو ریفرش کنه. 
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*Qcry5pCXIy2KeNRsq3w7Bg.png&quot; alt=&quot;صفحه پیشفرضی که احتمالا خواهید دید&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;yarn-build&quot;&gt;&lt;strong&gt;yarn build&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;در توضیحات نوشته «Bundles the app into static files for production». اگر با تا به حال با ابزارهایی مثل &lt;a href=&quot;https://gulpjs.com&quot;&gt;گالپ&lt;/a&gt; یا وب‌پک کار کرده باشید و با فرایند آشنا باشید، احتمالا می‌دونید که اینها چه معنایی داره . این دستور تمام جاواسکریپت‌هایی (و چیزهایی دیگه‌ای) که توی برنامه‌تون نوشتید رو می‌گیره، تبدیلشون می‌کنه به زبونی که مرورگر بتونه اجراشون کنه و سپس، در &lt;strong&gt;یک فایل&lt;/strong&gt; اون‌ها رو فشرده می‌کنه این کار باعث می‌شه که بر خلاف نسخه‌ای که برای توسعه روی کامپیوتر خودتون اجرا می‌کنید، نسخه build بسیار فشرده و کم‌حجم بشه که بتونید با خیال راحت اون رو توی هاستتون بارگذاری، و برنامه رو آنلاین کنید!&lt;/p&gt;
&lt;h1 id=&quot;yarn-test&quot;&gt;&lt;strong&gt;yarn test&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;بزارید یه خبر خیلی خوب بهتون بدم! از نسخه 0.3.0 به بعد، این ابزار کتاب‌خونه تست‌نویسی &lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;Jest&lt;/a&gt; رو هم به ابزارهایی که نصب و تنظیم می‌کنه اضافه کرده تا دیگه حتی برای برای تست نوشتن هم نیاز به نصب و تنظیم چیز اضافه‌ای نداشته باشید. با این دستور می‌تونید تست‌هاتون رو اجرا کنید و نتیجه رو ببینید.
همین الان به مجموعه فایل‌هایی که دارید نگاه کنید، احتمالا چیزی شبیه به این خواهید دید:
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*g-MbFVvZbj_nBRSrogEOgg.png&quot; alt=&quot;یک پروژه ساخته شده با این ابزار&quot; /&gt;&lt;/p&gt;

&lt;p&gt;اگر دقت کنید یک فایل جاواسکریپت با نام &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; و یک فایل تست با نام &lt;code class=&quot;highlighter-rouge&quot;&gt;App.test.js&lt;/code&gt; توی پروژه وجود دارن. پس با اجرای دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn test&lt;/code&gt;، احتمالا خروجی مثل خروجی زیر بگیرید:
&lt;img src=&quot;https://image.ibb.co/bAL3eH/test.png&quot; alt=&quot;اجرای دستور تست&quot; /&gt;&lt;/p&gt;

&lt;p&gt;همونطور که دیدید، دستور test، تست‌های برنامه رو شناسایی و اجرا کرد. شما می‌تونید با استفاده از Jest هر تستی که می‌خواهید رو برای کد‌های برنامه تون بنویسید. یه رازی رو بهتون می‌گم و این رو از من به نصیحت داشته باشید، اگه خودتون می‌خواستید همه این‌ها رو سر هم کنین واقعا عذاب الیمی می‌کشیدید :) پس قدر این راحتی رو بدونید و برای همه‌ی کامپوننت‌هاتون تست بنویسید :)&lt;/p&gt;

&lt;p&gt;#&lt;strong&gt;yarn eject&lt;/strong&gt;
«این ابزار و وابستگی‌های آن را حدف می‌کند و فایل‌های پیکربندی و اسکریپت را در دایرکتوری برنامه قرار می‌دهد. اگر این کار را بکنی، راه برگشتی وجود ندارد!». خب، توضیح مناسبی بود.
اونچه که این دستور انجام می‌ده اینه که برنامه شما رو از چارچوب  &lt;strong&gt;create-react-app&lt;/strong&gt; بیرون میاره و به یک چارچوب وب‌پک استاندارد  تبدیل می‌کنه. این کار به این به شما این امکان را می‌ده که در صورت نیاز بتونید ابزارهایی رو حذف/اضافه کنید و دست‌‌کاری‌های پیشرفته‌ای رو که مي‌خواهید، انجام بدید. می‌تونید بهش به این شکل نگاه کنید که میاد و داربست‌های CRA رو بر می‌داره و برنامه شما رو در کنترل خودتون می‌زاره.
البته با توجه به گستردگی و پوشش فوق‌العاده‌ای که مستندات CRA برای اکثر ابزارها ارائه داده، شما تقریبا (مگر در مواردی واقعا خاص) نیازی به خروج از این چارچوب ندارید.&lt;/p&gt;

&lt;h1 id=&quot;آشنایی-با-ساختار-برنامه&quot;&gt;آشنایی با ساختار برنامه&lt;/h1&gt;
&lt;p&gt;خب، بیایید دوباره ساختار پروژه رو نگاه کنیم:
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*g-MbFVvZbj_nBRSrogEOgg.png&quot; alt=&quot;ساختار پیشفرض&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ابزار CRA برای شما یک فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; ساخته که توش راهنمایی جامع از کل برنامه رو ارائه داده. هر وقت به مشکلی برخوردید یا جایی از ابزار براتون مبهم بود می‌تونید به این فایل مارک‌داون مراجعه کنید. در پوشه &lt;code class=&quot;highlighter-rouge&quot;&gt;public/&lt;/code&gt; فایل‌های استاتیک برنامه مثل &lt;code class=&quot;highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt; یا &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; (که کد ری‌اکت ما در این فایل رندر می‌شه) رو می‌بینید.&lt;/p&gt;

&lt;p&gt;بزارید داخل فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; رو یه نگاهی بندازیم:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;theme-color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#000000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manifest&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%PUBLIC_URL%/manifest.json&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shortcut icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%PUBLIC_URL%/favicon.ico&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;React App&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
      You need to enable JavaScript to run this app.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;مهم‌ترین جزء&lt;/strong&gt; این کد HTML، برچسب &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div id=”root”&amp;gt;&lt;/code&gt; هست. داخل این برچسب هست که قراره کد ری‌اکت ما Render بشه. 
به جز این‌ها ما فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; رو داریم که وابستگی‌ها و اطلاعات کلی برنامه‌مون اونجا قرار داره. توی پوشه &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/&lt;/code&gt; هم تمامی وابستگی‌هایی که برنامه ما بهشون نیاز داره قرار داده شدن که با دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install&lt;/code&gt; نصبشون کردیم. تقریبا هیچوقت نیاز نیست در محتوای این دایرکتوری دست ببرید.&lt;/p&gt;

&lt;p&gt;اما مهم‌ترین دایرکتوری برای ما، دایرکتوری &lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt; هست. اکثر کدهای جاوااسکریپت ما قراره که توی این پوشه قرار داده بشن که محتواش رو جلوتر بررسی می‌کنیم.&lt;/p&gt;

&lt;p&gt;فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; حاوی فرخوان &lt;code class=&quot;highlighter-rouge&quot;&gt;Render&lt;/code&gt; برنامه ما از &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM&lt;/code&gt; هست که فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; ما رو می‌خونه ( که درش کدهای اصلی برنامه‌مون قرار داره). و همچنین به &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM&lt;/code&gt; می‌گه کجا این‌ها رو نشون بده. ( اون &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div id=”root”&amp;gt;&lt;/code&gt; رو که یادتونه؟) &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; هم استایل‌های کلی رو نگه‌داری می‌کنه.
و اما &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;، نخستین کامپوننت ری‌اکت ما هست که جلوتر باهاش کار داریم. &lt;code class=&quot;highlighter-rouge&quot;&gt;App.css&lt;/code&gt; استایل‌های مربوط به این کامپوننت به خصوص را شامل می‌شه و تصویر &lt;code class=&quot;highlighter-rouge&quot;&gt;logo.svg&lt;/code&gt; هم فقط لوگوی ری‌اکته، نه چیزی بیشتر. &lt;code class=&quot;highlighter-rouge&quot;&gt;App.test.js&lt;/code&gt; هم که قبلا در موردش صحبت کردیم یک فایل تست نمونه برای کامپوننت &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; هست.&lt;/p&gt;

&lt;h1 id=&quot;ساخت-نخستین-کامپوننت&quot;&gt;ساخت نخستین کامپوننت&lt;/h1&gt;
&lt;p&gt;حالا شروع کنیم به کد زدن. اول توی دایرکتوری پروژه توی ترمینال دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn start&lt;/code&gt; یا &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; رو بزنید تا وب‌سرور توسعه ما شروع به کار کنه و توی مرورگر بتونم نتیجه پروژه‌مون رو ببینیم.. حالا بیایید یه کار باحال کنیم. تمام محتوای &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; و &lt;code class=&quot;highlighter-rouge&quot;&gt;App.css&lt;/code&gt; رو پاک کنید تا از اول بنویسیمشون! پس این دو فایل رو باز کنید و محتواشون رو خالی کنید.
 وقتی از استاندارد ES6 استفاده می‌کنید، دو راه وجود داره تا کامپوننت بسازید. از طریق &lt;strong&gt;فانکشن‌ها&lt;/strong&gt; یا از طریق &lt;strong&gt;کلاس‌های ES6&lt;/strong&gt;. در این قسمت ما کامپوننتمون رو با استفاده فانکشنم می‌سازیم و در قسمت بعد اون رو با class بازنویسی می‌کنیم تا تفاوت‌هاشون رو متوجه شیم.&lt;/p&gt;

&lt;p&gt;هر دو روش نیازمند این هستند که خود کتابخونه ری‌اکت رو وارد کامپوننتمون کنیم. پس داخل فایل کامپوننتمون (در &lt;code class=&quot;highlighter-rouge&quot;&gt;src/App.js&lt;/code&gt;) این خط رو اضافه کنید:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;و تمام! ما هرچیزی که از ری‌اکت نیاز داریم برای ساخت کامپوننت‌ها رو در دسترس داریم! دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; کتابخونه ری‌اکت که قبلا با دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install&lt;/code&gt; به شکل خودکار توی پوشه &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modulse&lt;/code&gt; نصب کرده بودیم رو در متغیر &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; در دسترس ما قرار می‌ده.
حالا فانکشن کامپوننت رو بنویسیم:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;با همین ۵ خط ما تا خرخره توی ES6 فرو رفتیم :) اگه با سینتکس ES6 آشنا نیستید پیشنهاد می‌کنم بیش از ادامه دادن به آموزش در موردش مطالعه کنید و ویژگی‌هاش رو یاد بگیرید.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ما ابتدا با دستور const، کامپوننتمون با نام App رو داخل یک ثابت تعریف کردیم (از اونجایی که قرار نیست در حین اجرای اپلیکیشن اون رو تغیر بدیم، پس تعریف یک ثابت کار خوبیه). تعریف کامپوننت رو با استفاده از یک &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;Arrow Function&lt;/a&gt; انجام دادیم که از ویژگی‌های خوب ES6 هست. فانکشن ما هیچ آرگومانی نمی‌گیره. هر کامپوننتی که به شکل فانکشن تعریف می‌کنیم باید حتما یک JSX رو به ما با دستور return برگردونه.  و یادتون باشه که همیشه محتوای JSX تون رو داخل &lt;strong&gt;پرانتز&lt;/strong&gt; قرار بدید. پرانتز فقط هنگامی که جی‌اس‌اکس چند خطی داشته باشید الزامی هست، اما این تمرین خوبیه که همیشه ازش استفاده کنید تا از اشتباهاتی که ممکنه پیش بیاد جلوگیری کنید.  همچنین با استفاده از &lt;code class=&quot;highlighter-rouge&quot;&gt;className=&quot;App&quot;&lt;/code&gt; یک کلاس CSS به کامپوننتمون می‌دیم. نکته مهم اینه که از اونجایی که class توی زبان جاوا‌اسکریپت یک واژه رزرو شده‌ست، همیشه برای تعین کلاس باید از واژه className استفاده کنیم.&lt;/p&gt;

&lt;h1 id=&quot;این-jsx-که-میگی-چی-هست-اصلا&quot;&gt;این JSX که می‌گی، چی هست اصلا؟&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;اگه می‌دونید JSX چیه می‌تونید این بخش رو رد کنید، اگر نه این خلاصه رو بخونید تا درک بهتری داشته باشید.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;جی‌اس‌اکس (JSX) یک زبان الگویی (templating) است که خیلی به HTML شباهت داره. این زبان به شما این امکان رو می‌ده که برای کامپوننت‌هاتون الگوهایی رو بنویسی که خیلی شبیه HTML هستند اما یک سری تفاوت‌ها داره. اول اینکه شما می‌تونید توی الگوهاتون هر جایی که خواستید از با استفاده از آکولاد (از این‌ها: {}) از جاواسکریپت استفاده کنید. دوم اینکه، برخی از کلمه‌ها در جاوااسکریپت از قبل رزرو شدن و جزو خود زبان هستند، (مثل class) بنابراین از یک سری مشخصه‌های دیگه (مثل className) به جای اون‌ها استفاده می‌کنیم.&lt;/p&gt;

&lt;p&gt;علاوه بر این، وقتی که شما دارید توی دستور return تون یک JSX بر می‌گردونید، شما فقط باید &lt;strong&gt;یکدونه&lt;/strong&gt; المان رو بگردونید. برای مثال اگر این کار رو بکنید:
&lt;img src=&quot;https://image.ibb.co/gYqr1x/must_wrap.png&quot; alt=&quot;یک کار اشتباه&quot; /&gt;&lt;/p&gt;

&lt;p&gt;خطای زیر رو دریافت می‌کنید:
&lt;img src=&quot;https://image.ibb.co/mXDpoc/must_wrap_error.png&quot; alt=&quot;داداش داری اشتباه می‌زنی.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;که برای رفع این مشکل می‌تونید کل JSXتون رو داخل یک &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; مادر قرار بدید:
&lt;img src=&quot;https://image.ibb.co/jaWygx/now_wrapped.png&quot; alt=&quot;مشکل حل شد.&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ادامه-کار&quot;&gt;ادامه کار&lt;/h1&gt;
&lt;p&gt;خب برگردیم که ادامه ساخت کامپوننتمون. الان اگه به خروجی مرورگر نگاه کنید هنوز هم نمی‌تونید کامپوننتمون رو ببینید.
در ES6 باید یک کار دیگه هم بکنیم تا بتونیم این امکان رو به باقی فایل‌ها بدیم تا بتونن به داخل فایل ما دسترسی داشته باشن و اون کار &lt;strong&gt;اکسپورت&lt;/strong&gt; (&lt;strong&gt;export&lt;/strong&gt;)‌ هست!&lt;/p&gt;

&lt;p&gt;در انتهای فایل خط زیر را اضافه کنید:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;با این خط کامپوننتمون رو که توی ثابت App ساخته بدویم استخراج می‌کنیم. حالا اگه فایل رو سیو کنید و برگردید به مرورگرتون می‌تونید کامپوننتمون رو ببینیم که صحیح و سالم داره نشون داده می‌شه.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image.ibb.co/jSkv1x/hello_world.png&quot; alt=&quot;اولین کامپوننت صحیح و سالممون!&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;افزودن-css-به-کامپوننتمون&quot;&gt;افزودن CSS به کامپوننتمون&lt;/h1&gt;
&lt;p&gt;کامپوننتمون خیلی ساده و سفیده. پس بیایید فایل CSSای که توی پروژه‌مون وجود داره (در آدرس: &lt;code class=&quot;highlighter-rouge&quot;&gt;src/App.js&lt;/code&gt;) رو بهش وصل کنیم و چند خطی CSS بنویسیم. 
برای وارد کردن فایل CSS به پروژه‌مون باید با دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; به شکل زیر این کار رو انجام بدیم.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حالا وارد فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;src/App.css&lt;/code&gt; بشید و کلاس زیر را وارد کنید:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f5f5f5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;با ذخیره کردن فایل و چک کردن صفحه مرورگر وب‌سرور توسعه‌ام می‌تونیم صفحه خوشگل و با سی‌اس‌اس‌مون رو به شکل زیر ببینیم:
&lt;img src=&quot;https://image.ibb.co/bEha1x/hello_world2.png&quot; alt=&quot;برای شروع همچین بدم نیست :)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;خب!‌ پس ما الان مراحل ساخت یک کامپوننت ساده رو فهیدیم و اون رو پیاده‌سازی کردیم. بیایید در انتها ببینیم که این کامپوننتمون داخل فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; چجوری داره نمایش داده می‌شه.
فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;src/index.js&lt;/code&gt; رو باز کنید و داخلش رو نگاه کنید:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./index.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;registerServiceWorker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./registerServiceWorker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;registerServiceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;خُب در خط اول، &lt;strong&gt;import React&lt;/strong&gt; رو  قبلا توضیح دادیم.&lt;/li&gt;
  &lt;li&gt;در خط دوم ما &lt;code class=&quot;highlighter-rouge&quot;&gt;import ReactDOM&lt;/code&gt; رو داریم. به طور خلاصه &lt;code class=&quot;highlighter-rouge&quot;&gt;react-dom&lt;/code&gt;  بخش از React است مسئول تبدیل و نمایش کامپوننت‌های React از &lt;a href=&quot;http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/&quot;&gt;دام‌مجازی&lt;/a&gt; به &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&quot;&gt;دام‌اصلی&lt;/a&gt; هست. توی این مورد خاص ما از تابع  &lt;code class=&quot;highlighter-rouge&quot;&gt;render()‍&lt;/code&gt;  این کتاب‌خونه استفاده کردیم.&lt;/li&gt;
  &lt;li&gt;در خط سوم هم فایل CSS اصلی ما اومده که سی‌اس‌اس های مادر رو می‌تونم  توش قرار بدیم.&lt;/li&gt;
  &lt;li&gt;در این خط (&lt;code class=&quot;highlighter-rouge&quot;&gt;import App&lt;/code&gt;) ما کامپوننتی که نوشتیم رو فرا می‌خوانیم.  این دستور در واقع فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; که ما دقایقی پیش ساختیم رو وارد می‌کنه که به شکل پیش‌فرض اگر پسوند فایل ما &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; باشه، نیازی به ذکرش نیست و می‌تونیم فقط اسم بدون پسوند رو بنویسیم و خود ES6 متوجه این می‌شه که فایل با پسوند &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; رو وارد کنه. همچنین «./» ابتدای آدرس باعث می‌شه که جاواسکریپت متوجه شه این فایل در همین پوشه که &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; وجود داره هست و یک ماژول npm رو وارد نکنه.&lt;/li&gt;
  &lt;li&gt;خط بعد هم فراخوان فایلی‌ست که به شکل پیشفرض در CRA وجود داره و وظیفه‌اش ساخت یک نسخه PWA یا همان &lt;a href=&quot;https://en.wikipedia.org/wiki/Progressive_Web_Apps&quot;&gt;&lt;strong&gt;Progressive Web Apps&lt;/strong&gt;&lt;/a&gt; از برنامه شماست که البته فعلا لازم نیست در موردش نگران باشید. می‌تونید بزارید سرجاش باشه تا در انتهای یادگیری ری‌اکت، سری بهش بزنیم و بررسیش کنیم.&lt;/li&gt;
  &lt;li&gt;و در انتها ما تابع &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render&lt;/code&gt; رو داریم که وظیفه نمایش برنامه ری‌اکت ما رو داره.  این فانکنش دو آرگومان می‌گیره که اولیش کامپوننتی هست که می‌خواهیم بارگذاری بشه، و دومین آرگومان، مکانی است که اون آرگومان باید نمایش داده بشه. که ما برای آرگومان اول، کامپوننت App ای که نوشتیم رو قرار دادیم و در آرگومان دوم هم به همان &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div id=”root”&amp;gt;&lt;/code&gt; ،که قبلا در فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; بهش اشاره کردیم.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://image.ibb.co/eDKVJc/giphy.gif&quot; alt=&quot;ری‌اکت دوشواری نداره!&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;جمعبندی&quot;&gt;جمع‌بندی&lt;/h1&gt;
&lt;p&gt;تبریک! حالا شما یک &lt;em&gt;فانکشنال کامپوننت&lt;/em&gt; ساختید! در مورد webpack و babel هم همه چیز بدون اینکه بفهمیم تمام شد و بدون هیچ دردسری راه‌انداری شدند! این یک روش بسیار خوب و تمیز برای شروع کار با react است. ما در آموزش بعدی ساخت کامپوننت با استفاده از classهای ES6  و مفهوم state ها رو یاد می‌گیریم.&lt;/p&gt;

&lt;p&gt;قسمت دوم: به زودی…&lt;/p&gt;</content><author><name>مهراد روستا</name></author><category term="javascript" /><category term="react" /><category term="react-for-beginners" /><summary type="html">اگر در یک سال اخیر در مورد تکنولوژی‌های وب مطالعه کردید، پس احتمالا با فریم‌ورک React در حد خوبی آشنایی دارید. یکی از شکایت‌هایی که تازه واردان در مورد ری‌اکت می‌کنند اینه که «چرا اینقدر شروع و ساخت یک پروژه باهاش دنگ و فنگ داره؟» که خب البته راه‌های زیادی برای فائق اومدن بر این پیچیدگی‌ها ارائه شده.</summary></entry><entry><title type="html">چگونه برای زبان PHP اکستنشن بنویسم؟</title><link href="http://pullrequest.ir/%DA%86%DA%AF%D9%88%D9%86%D9%87-%D8%A8%D8%B1%D8%A7%DB%8C-%D8%B2%D8%A8%D8%A7%D9%86-php-%D8%A7%DA%A9%D8%B3%D8%AA%D9%86%D8%B4%D9%86-%D8%A8%D9%86%D9%88%DB%8C%D8%B3%DB%8C%D9%85/" rel="alternate" type="text/html" title="چگونه برای زبان PHP اکستنشن بنویسم؟" /><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><id>http://pullrequest.ir/%DA%86%DA%AF%D9%88%D9%86%D9%87%20%D8%A8%D8%B1%D8%A7%DB%8C%20%D8%B2%D8%A8%D8%A7%D9%86%20php%20%D8%A7%DA%A9%D8%B3%D8%AA%D9%86%D8%B4%D9%86%20%D8%A8%D9%86%D9%88%DB%8C%D8%B3%DB%8C%D9%85</id><content type="html" xml:base="http://pullrequest.ir/%DA%86%DA%AF%D9%88%D9%86%D9%87-%D8%A8%D8%B1%D8%A7%DB%8C-%D8%B2%D8%A8%D8%A7%D9%86-php-%D8%A7%DA%A9%D8%B3%D8%AA%D9%86%D8%B4%D9%86-%D8%A8%D9%86%D9%88%DB%8C%D8%B3%DB%8C%D9%85/">&lt;p&gt;خیلی باحاله، وقتی ما میتونیم برای زبانی که داخلش برنامه نویسی میکردیم هم اکستنشن بنویسیم و این بهمون علاوه برخیلی از امکانات وامتیازات فنی یه حس قدرت میده که بتونیم برای php اکستنشن بنویسم.&lt;/p&gt;

&lt;p&gt;برای نوشتن اکستنشن در php یه راه قدیمی و سخت هست که از آشنایی با zend-engine میگذره و همچنین برنامه نویسی به زبان C که یه کم دنگ و فنگ داره و ممکنه حتی خیلی از تازه کارها از این کار منصرف بشن!
اما راهی که میخوام در ادامه بگم زبان &lt;a href=&quot;https://zephir-lang.com&quot;&gt;Zephir&lt;/a&gt;   هستش که به آسونی میتونید باهاش آشنا بشید و فلسفه ی ساختن این زبان آسون کردن ساخت اکستنشن برای برنامه نویسانphp هستش و تا حد زیادی توابع و سینتکس این زبان شبیه به خود php بامزه ی ماست!&lt;/p&gt;

&lt;p&gt;شمای کلی کارش هم به صورت زیره&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image.ibb.co/gqghQ6/scheme.png&quot; alt=&quot;Architect&quot; title=&quot;Architect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;برنامه نوشته شده به زبان zephir شما پس از بررسی و بهینه سازی به یک اکستنشن C برای php تبدیل میشه و بعد از اون هم به یک اکستنشن بومی یا همون نیتیو خودمون تبدیل میشه.&lt;/p&gt;

&lt;h1 id=&quot;نصب-کامپایلر&quot;&gt;نصب کامپایلر&lt;/h1&gt;

&lt;p&gt;از اونجایی که گیک ها روی لینوکس کار میکنند پس راه نصب zephir رو روی لینوکس 
که از سایت مرجع عیناً برداشتم رو اینجا میذارم. میتونید از بخش &lt;a href=&quot;https://docs.zephir-lang.com/en/latest/install.html&quot;&gt;Installation&lt;/a&gt; کمک بگیرید و پیش نیازها   رو نصب کنید، و در ویندوز هم میتونید با یه مشقتی سر کانفیگ کردن ویژوال استودیو خروجی بگیرید.&lt;/p&gt;

&lt;p&gt;پیشنیازهای سیستم:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gcc &amp;gt;= 4.x/clang &amp;gt;= 3.x&lt;/li&gt;
  &lt;li&gt;re2c 0.13 or later&lt;/li&gt;
  &lt;li&gt;gnu make 3.81 or later&lt;/li&gt;
  &lt;li&gt;autoconf 2.31 or later&lt;/li&gt;
  &lt;li&gt;automake 1.14 or later&lt;/li&gt;
  &lt;li&gt;libpcre3&lt;/li&gt;
  &lt;li&gt;php development headers and tools &lt;br /&gt;
نترسید! اینا کلاً چیز خاصی نیستن و اگر مثلا از ابونتوی آخرین نسخه استفاده میکنید اکثرش رو خواهید داشت.
اول به سیستم یه آپدیت میدیم تا حالش جا بیاد که مشکلی برامون ایجاد نکنه سر برنامه های قدیمیش و Repoهاش هم به روز بشه!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;نکته! همین دستورات رو در توزیع های Redhat مثل CentOs میتونید بزنید کافیه که به جای apt-get از دستور yum استفاده کنید.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;خوب حالا بسته به ورژنphpتون که من اینجا 7.0 رو دارم کامپایلر زبان و پیشنیازهاش رو نصب میکنیم.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install git gcc make php7.0 php7.0-json php7.0-dev libpcre3-dev re2c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;البته اینو تذکر بدم که قبلش باید php رو روی سیستمتون داشته باشید این دستورات مربوط به نصب صرفاً رفقای زِفیر هستش&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;بعد از نصب پیشنیازها حالا نوبت به کلون کردن زفیر از گیتهاب هستش:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/phalcon/zephir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;بعدشم که باید کامپایلر رو از روی سورسش نصب کنید. با دستور اول وارد پوشه ی سورس کامپایلر میشید و با دستور بعدی میگیم بهش که نصب شو!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd zephir
$ ./install -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;امیدوارم هیچ ارور زبون نفهمی ندیده باشید و این مراحل رو به آسونی پشت سر گذاشته باشید. حالا چک کنیم ببینیم زفیر نصب شده!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ zephir help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;خوب اگر راهنمای استفاده چاپ شد که بهتون تبریک میگم شما الان یه اکستشن نویس زبان محبوبphp هستی :)&lt;/p&gt;

&lt;p&gt;در ضمن اگر از Docker استفاده میکنید میتونید به راحتی از &lt;a href=&quot;https://hub.docker.com/r/phalconphp/zephir/&quot;&gt;اینجا&lt;/a&gt;
داکیومنت ایمیجش رو ببینید و یا با دستور زیر پول کنید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull phalconphp/zephir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;آشنایی-اولیه-با-سینتکس-و-ساخت-یه-پروژه-ی-نمونه-یا-همون-hello-world&quot;&gt;آشنایی اولیه با سینتکس و ساخت یه پروژه ی نمونه یا همون Hello World:&lt;/h1&gt;

&lt;p&gt;تفاوت عمده ی زفیر با php در نگارش چندتا چیز ساده است:&lt;/p&gt;

&lt;p&gt;1)  تعریف متغیر قبل از استفاده از اون، یعنی اگر میخوایم از متغیر &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; استفاده کنیم باید ازقبل مثلاً به صورت &lt;code class=&quot;highlighter-rouge&quot;&gt;int i;&lt;/code&gt; تعریفش کنیم.&lt;/p&gt;

&lt;p&gt;2)  موقع مقدار دهی به متغیرها باید از &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; استفاده کنیم، یعنی اگر متغیر &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; رو بخوایم برابر 0 قرار بدیم باید بنویسیم &lt;code class=&quot;highlighter-rouge&quot;&gt;let i =0;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) موقع تعریف متغیرها دیگه خبری از دلار &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; معروف نیست و باید به رسم C نامگذاریها رو انجام بدید&lt;/p&gt;

&lt;p&gt;4)  اگر متغیری رو تعریف کنیم و ازش استفاده نکنیم کامپایلر بهمون اخطار میده&lt;/p&gt;

&lt;p&gt;5) فایلهای این زبان برنامه نویسی با پسوند &lt;code class=&quot;highlighter-rouge&quot;&gt;.zep&lt;/code&gt; ذخیره میشن!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;البته که تفاوتهای دیگه ای هم هست ولی موارد بالا اصلی ترین اختلافات هست و برای مطالعه ی بیشتر به سایت اصلیش برید!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;برنامه-hello-world&quot;&gt;برنامه hello world&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ zephir init Test
$ cd Test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;دستور بالا رو اجرا میکنیم تا فایلهای ابتدایی یه پروژه ایجاد بشن و اون Test که نوشتیم اسم فضای برنامه است و هر اسمی میتونه باشه! بعدش که فولدر برنامه رو با این دستور ساختید به همین نام فضای برنامه یه پوشه داخل اون هست  یعنی &lt;code class=&quot;highlighter-rouge&quot;&gt;Test/Test&lt;/code&gt; برای این مثالی که زدم.
بعدش یه فایل همنام کلاسی که میخوام بسازم در اینجا &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.zep&lt;/code&gt; و داخلش مینویسیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace Test;
class Hello
{
    public static function say()
    {
        echo &quot;Hello World!&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;تو یه پوشه بالاتر از این یعنی همون فولدر اصلی اکستنشن یه فایل هست به نام &lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt;  اگر برنامتون نیاز به اکستنشن خاصی داره و یا دوست دارید تنظیماتش رو عوض کنید میتونید بازش کنید و تغییرش بدید.&lt;/p&gt;

&lt;h2 id=&quot;کامپایل-برنامه&quot;&gt;کامپایل برنامه&lt;/h2&gt;

&lt;p&gt;در پوشه ی ریشه اکستنش کافیه این کامند رو بزنید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ zephir build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;و صبر کنید تا کامپایل اکستنشن تموم بشه، وقتی که تموم شد یه فایل با نام &lt;code class=&quot;highlighter-rouge&quot;&gt;test.so&lt;/code&gt; داخل فولدر اکستنشهای php میسازه که اگر نمیدونید کجاست میتونید داخل &lt;code class=&quot;highlighter-rouge&quot;&gt;phpinfo();&lt;/code&gt; دنبال کافیگ &lt;code class=&quot;highlighter-rouge&quot;&gt;extension_dir&lt;/code&gt; بگردید.( اگر نمیخواید فایل خروجی رو کپی کنید مهم نیست بدونید اون فایل کجا ریخته میشه!) ولی باید فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;php.ini&lt;/code&gt; رو باز کنید و( تهش یا قسمتی که مربوط به اکستنشن هاست برای اینکه بعدا نخواهید دنبال چیزی بگردید )باید اکستنشنی که بیلد کردید رو اعلام کنید.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension=test.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;بعد از اینکه سیو کردید نوبت اینه اگر لازمه وبسرورتون رو ریستارت کنید تا تغییرات اعمال بشه.
تمام مراحلی که در این قسمت گفته شد فقط برای اولین دفعه ای که اکستنشن رو تعریف میکنید لازمه به جز ریستارت کردن وبسرور که باید بعد از هر بار بیلد اعمال بشه و اگر یه گیک باشید میدونید که با یه &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; هر دو دستور رو با هم ران کنید :)&lt;/p&gt;

&lt;p&gt;بعد از بیلد کردن و تعریف اکستنشنمون برای php حالا وقتشه بریم و از ران کردنش لذت ببریم. یه فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; بسازید و داخلش بنویسید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Test\Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Hello World&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;اون کلاسهایی که در اکستنشن نوشتید همه جا در دسترس هستش و بدون استفاده از &lt;code class=&quot;highlighter-rouge&quot;&gt;autoloader&lt;/code&gt; یا… در همه جای برنامه کار میکنه!&lt;/p&gt;

&lt;p&gt;زفیر برای این ابداع نشده که جای C یا php رو بگیره بلکه اومده تلفیقی از مزایای این دو رو ارائه بده، فریم ورک &lt;a href=&quot;https://phalconphp.com/en/&quot;&gt;Phalconphp&lt;/a&gt; این زبان رو برای توسعه فریم ورکش ساخته که کل فریم ورک فالکن به صورت  کامپایل شده هست از سرعت و امکانات خوبی برخوردار هستش، که طبق یه سری تستهای نه چندان تخصصی خودم با ابزار &lt;code class=&quot;highlighter-rouge&quot;&gt;apache abs &lt;/code&gt;تا 20 برابر سرعت بالاتری نسبت به فریم ورکی مثل لاراول داشت!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;مزایای Zephir:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;افزایش سرعت اجرای برنامه ، اما نه در مواقعی که الگوریتم نیاز به IO یا Memory زیاد داره!&lt;/li&gt;
  &lt;li&gt;کامپایل شدن که درنهایت باعث مخفی شدن کدهای شما خواهد شد بدون نیاز به انکد کردن کدها و دردسرهای ناشی از اونها&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;امیدوارم براتون مفید باشه منتظر فیدبک های شما هستم&lt;/p&gt;</content><author><name>محمود اسکندری</name></author><category term="php" /><category term="zephir" /><category term="پی" /><category term="اچ" /><category term="پی" /><category term="اکستنشن" /><summary type="html">خیلی باحاله، وقتی ما میتونیم برای زبانی که داخلش برنامه نویسی میکردیم هم اکستنشن بنویسیم و این بهمون علاوه برخیلی از امکانات وامتیازات فنی یه حس قدرت میده که بتونیم برای php اکستنشن بنویسم.</summary></entry><entry><title type="html">به پیشرفت جامعه متن باز کمک کنید، تیشرت مجانی بگیرید!</title><link href="http://pullrequest.ir/%D8%A8%D9%87-%D9%BE%DB%8C%D8%B4%D8%B1%D9%81%D8%AA-%D8%AC%D8%A7%D9%85%D8%B9%D9%87-%D9%85%D8%AA%D9%86-%D8%A8%D8%A7%D8%B2-%DA%A9%D9%85%DA%A9-%DA%A9%D9%86%DB%8C%D8%AF-%D8%AA%DB%8C%D8%B4%D8%B1%D8%AA-%D9%85%D8%AC%D8%A7%D9%86%DB%8C-%D8%A8%DA%AF%DB%8C%D8%B1%DB%8C%D8%AF/" rel="alternate" type="text/html" title="به پیشرفت جامعه متن باز کمک کنید، تیشرت مجانی بگیرید!" /><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><id>http://pullrequest.ir/%D8%A8%D9%87%20%D9%BE%DB%8C%D8%B4%D8%B1%D9%81%D8%AA%20%D8%AC%D8%A7%D9%85%D8%B9%D9%87%20%D9%85%D8%AA%D9%86%20%D8%A8%D8%A7%D8%B2%20%DA%A9%D9%85%DA%A9%20%DA%A9%D9%86%DB%8C%D8%AF%D8%8C%20%D8%AA%DB%8C%D8%B4%D8%B1%D8%AA%20%D9%85%D8%AC%D8%A7%D9%86%DB%8C%20%D8%A8%DA%AF%DB%8C%D8%B1%DB%8C%D8%AF</id><content type="html" xml:base="http://pullrequest.ir/%D8%A8%D9%87-%D9%BE%DB%8C%D8%B4%D8%B1%D9%81%D8%AA-%D8%AC%D8%A7%D9%85%D8%B9%D9%87-%D9%85%D8%AA%D9%86-%D8%A8%D8%A7%D8%B2-%DA%A9%D9%85%DA%A9-%DA%A9%D9%86%DB%8C%D8%AF-%D8%AA%DB%8C%D8%B4%D8%B1%D8%AA-%D9%85%D8%AC%D8%A7%D9%86%DB%8C-%D8%A8%DA%AF%DB%8C%D8%B1%DB%8C%D8%AF/">&lt;p&gt;سلام خدمت همه دوستان اوپن سورسی! 😊 چند روزه ک رویدادی (نمیدونم رویداد بهش بگیم درست تره یا جشنواره!) به اسم هکتوبرفست توسط شرکت DigitalOcean شروع شده که تا آخر اکتبر ادامه داره. میخوام توی این پست براتون دربارش توضیح بدم، آخر سر اگه تیشرت گرفتید بگید دمش گرم چه پست خفنی گذاشته بود!! 😁&lt;/p&gt;

&lt;h1 id=&quot;hacktoberfest-چیه-دیگه&quot;&gt;Hacktoberfest چیه دیگه؟!&lt;/h1&gt;

&lt;p&gt;همونطور که بالاتر گفتم، هکتوبرفست یه دوره یکماهست که از اول اکتبر شروع میشه و تا آخر اکتبر ادامه داره. توی این جشن (خودشون بهش میگن سلبریشن!) میان میگن هرکی طی این یکماه توی پروژه های متن باز نرم افزاری توی گیتهاب (همون ریپازیتوری ها) مشارکت کنه و 4 تا پول ریکوئست موفق بفرسته که از طرف owner اون ریپازیتوری قبول و مرج بشه، براش یه تیشرت و کلی استیکر باحال از اینا که میچسبونن رو در لپتاپ، میفرستیم!&lt;/p&gt;

&lt;h1 id=&quot;شرایطش-چیه&quot;&gt;شرایطش چیه؟&lt;/h1&gt;

&lt;p&gt;هیچی! فقط توی چهارتا ریپازیتوری توی گیتهاب مشارکت کنید و پول ریکوئست بفرستید. الان که این مطلبو میخونید یعنی من اولیشو فرستادم و مرج شده و فقط سه تا دیگه تا تیشرت اصل آمریکایی دیجیتال اوشنی فاصله دارم! 😁😎&lt;/p&gt;

&lt;h1 id=&quot;بابا-ما-که-ایرانیم&quot;&gt;بابا ما که ایرانیم!&lt;/h1&gt;

&lt;p&gt;از اونجا که شرکت دیجیتال اوشن یه شرکت آمریکاییه و به ایرانی ها سرویس نمیده طبق معمول، اولین چیزی که به ذهن هممون میرسه اینه که برای ما چیزی نمیفرستن، اونم چی، از آمریکاااای ترامپی! 🇺🇸&lt;/p&gt;

&lt;p&gt;منم اولش همینو گفتم اما یکی از بچه ها توی گروه ویو (مهران رسولیان عزیز) که این جشنواره رو بهمون معرفی کرد، گفت که پارسال سرش شلوغ بود و تونست فقط 3 تا پول ریکوئست موفق بفرسته که مرج بشه اما در یکی از همین روزا در عین ناباوری براش یه بسته که روش نوشته بود Happy Hacking و توش چنتا استیکر گوگولی گیت و گیتهاب و لوگو خودشون بودو فرستادن!&lt;/p&gt;

&lt;h1 id=&quot;پول-پُست-کردن-بسته-رو-که-دیگه-باید-بدیم&quot;&gt;پول پُست کردن بسته رو که دیگه باید بدیم!&lt;/h1&gt;

&lt;p&gt;اینم بگم سرتونو از شدت این همه تناقض توی رفتار با ایرانیا میکوبید به دیوار!! جالبی قضیه اینه که حتی یک قرون هم لازم نیست بدید، شما برنامه نویس و مشارکت کننده متن باز هستید، یعنی دست کنی تو جیبت ناراحت میشم! تنها کاری که باید بعد از 4 تا پول ریکوئست موفق بکنید اینه که چاییتون رو بریزید (یا حالا قهوه) و منتظر بشید بستتون برسه!&lt;/p&gt;

&lt;h1 id=&quot;هَپی-هَکینگ&quot;&gt;هَپی هَکینگ!&lt;/h1&gt;

&lt;p&gt;فکر کنم همه اطلاعاتی که لازمه رو دادم دیگه، فقط یه لینک وبسایتش مونده که برید ثبت نام کنید و کارتون رو استارت بزنید:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hacktoberfest.digitalocean.com&quot;&gt;https://hacktoberfest.digitalocean.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;به امید روزی که برای هر ریپازیتوری پول ریکوئست فرستادیم یه تیشرتی ماگی پیکسلی چیزی برامون بفرسته. 😂&lt;/p&gt;

&lt;p&gt;راستی یادتون نره به دوستاتونم درباره این جشنواره بگید یا لینک این پست رو براشون بفرستید. جامعه اوپن سورس هرچی فعال تر بهتر! 💻&lt;/p&gt;</content><author><name>عرفان صحاف نژاد</name></author><category term="open-source" /><category term="otoberfest" /><category term="متن-باز" /><summary type="html">سلام خدمت همه دوستان اوپن سورسی! 😊 چند روزه ک رویدادی (نمیدونم رویداد بهش بگیم درست تره یا جشنواره!) به اسم هکتوبرفست توسط شرکت DigitalOcean شروع شده که تا آخر اکتبر ادامه داره. میخوام توی این پست براتون دربارش توضیح بدم، آخر سر اگه تیشرت گرفتید بگید دمش گرم چه پست خفنی گذاشته بود!! 😁</summary></entry><entry><title type="html">چرا باید از فریمورک استفاده کنیم؟</title><link href="http://pullrequest.ir/%DA%86%D8%B1%D8%A7-%D8%A8%D8%A7%DB%8C%D8%AF-%D8%A7%D8%B2-%D9%81%D8%B1%DB%8C%D9%85%D9%88%D8%B1%DA%A9-%D8%A7%D8%B3%D8%AA%D9%81%D8%A7%D8%AF%D9%87-%DA%A9%D9%86%DB%8C%D9%85/" rel="alternate" type="text/html" title="چرا باید از فریمورک استفاده کنیم؟" /><published>2017-09-08T00:00:00+00:00</published><updated>2017-09-08T00:00:00+00:00</updated><id>http://pullrequest.ir/%DA%86%D8%B1%D8%A7%20%D8%A8%D8%A7%DB%8C%D8%AF%20%D8%A7%D8%B2%20%D9%81%D8%B1%DB%8C%D9%85%D9%88%D8%B1%DA%A9%20%D8%A7%D8%B3%D8%AA%D9%81%D8%A7%D8%AF%D9%87%20%DA%A9%D9%86%DB%8C%D9%85%D8%9F</id><content type="html" xml:base="http://pullrequest.ir/%DA%86%D8%B1%D8%A7-%D8%A8%D8%A7%DB%8C%D8%AF-%D8%A7%D8%B2-%D9%81%D8%B1%DB%8C%D9%85%D9%88%D8%B1%DA%A9-%D8%A7%D8%B3%D8%AA%D9%81%D8%A7%D8%AF%D9%87-%DA%A9%D9%86%DB%8C%D9%85/">&lt;p&gt;سلام! 😊
توی اولین پست پول ریکوئستم میخوام در رابطه با موضوع “استفاده کردن یا نکردن از فریمورک ها” صحبت کنم. توی گروه های تلگرامی سوالات زیادی درباره این موضوع پرسیده میشه برای همین تصمیم گرفتم این مطلب رو بنویسیم تا برای دوستانی که سردرگم هستن کمکی باشه. مقدمه چینی بسه، بریم ببینیم داستان از چه قراره!&lt;/p&gt;

&lt;h2 id=&quot;فریمورک-چی-هست-اصلا&quot;&gt;فریمورک چی هست اصلا؟&lt;/h2&gt;

&lt;p&gt;فریمورک یک چارچوب نرم افزاریه که کمک میکنه اپلیکیشن شما تحت ساختار خاصی ایجاد و توسعه داده بشه.&lt;/p&gt;

&lt;p&gt;برای استفاده از فریمورک شما باید از مجموعه قوانین خاصی پیروی کنید و با فرمت خاصی پروژتون رو توسعه بدید. مزیت پیروی از این قوانین منسجم بودن کد، صرفه جویی توی زمان، پایداری بیشتر، امنیت قابل اعتماد تر و قابلیت های دیگه ای هست که بسته به فریمورک مورد استفاده متفاوته. جالبه نه؟ 😋&lt;/p&gt;

&lt;p&gt;تنها بخشی که ممکنه بخواد شمارو از استفاده از فریمورک منصرف کنه، مدت زمانی هست که شما باید صرف یادگیری قوانین، کلاس ها و ساختار فریمورک کنید. با توجه به اینکه یه مدت زمان میبره تا با فریمورک جدید آشنا بشید و بتونید باهاش کار کنید، منطقیه که اصلا سمت فریمورک بریم؟ باید بگیم بله، کاملا ارزشش رو داره!&lt;/p&gt;

&lt;h2 id=&quot;فریمورک-استفاده-کنیم-یا-نه&quot;&gt;فریمورک استفاده کنیم یا نه؟&lt;/h2&gt;

&lt;p&gt;جواب سوال خیلی واضحه و بستگی به پروژه شما داره. در صورتی که پروژه شما ممکنه از حد و سطح پروژه های ساده خارج بشه، قطعا شما احتیاج به یک فریمورک دارید. چون شما به عنوان یک برنامه نویس تنها یا حتی تیم، توانایی پوشش دادن همه جوانب یک اپلیکیشن رو بصورت “کامل” ندارید. دلیل دیگه ای که آدمو مجاب میکنه که برای پروژه های متوسط و بزرگ از فریمورک استفاده کنه، صرفه جویی توی وقت زمان پیاده سازی، توسعه و نگهداریه.&lt;/p&gt;

&lt;p&gt;در صورتی که از فریمورک استفاده نکنید (یا بخواید فریمورک شخصی بنویسید) چندین و چند مسئله هست که باید خوب راجع بهش فکر کنید:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;اصلا علم کافی برای پیاده سازی حرفه ای یک اپلیکیشن بدون فریمورک یا ساخت فریمورک اختصاصی رو دارید؟&lt;/li&gt;
  &lt;li&gt;آیا کد هایی که نوشتید بهینه ست و توی بهترین حالت ممکن نوشته شده؟&lt;/li&gt;
  &lt;li&gt;اگه مشکل امنیتی داشتید و هیچوقت متوجهش نشدید چی؟&lt;/li&gt;
  &lt;li&gt;پیاده سازی وبسایت بدون استفاده از فریمورک های از پیش ساخته شده، چقدر میتونه زمان ببره؟&lt;/li&gt;
  &lt;li&gt;اگر احتیاج داشتید پکیج از پیش نوشته شده ای به پروژتون اضافه یا کم کنید، بدون دردسر این کار انجام میشه؟&lt;/li&gt;
  &lt;li&gt;اگر کسی برای توسعه اپلیکیشن به شما و تیمتون اضافه شد، چقدر طول میکشه به ساختار کد یا فریمورک شما عادت کنه و باهاش آشنا بشه؟&lt;/li&gt;
  &lt;li&gt;کد های شما دارای داکیومنت کامل و جامع هست؟&lt;/li&gt;
  &lt;li&gt;چقدر میتونید زمان صرف توسعه هسته فریمورکتون کنید و آپدیت نگهش دارید؟&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;در صورتی که بتونید به سوالات بالا جواب منطقی و قانع کننده بدید، شما احتیاج به فریمورک ندارید، اما اگر جواب منطقی برای سوالات بالا نداشتید حتما یک فریمورک رو برای پروژه پیش روتون انتخاب کنید!&lt;/p&gt;

&lt;h2 id=&quot;چقدر-آماده-استفاده-از-فریمورک-هستید&quot;&gt;چقدر آماده استفاده از فریمورک هستید؟&lt;/h2&gt;

&lt;p&gt;موضوع دیگه ای که خیلی مهمه اینه که از لحاظ فنی آمادگی یادگیری و استفاده از فریمورک رو دارید؟&lt;/p&gt;

&lt;p&gt;جواب این سوال برای پلتفرم ها و زبان های مختلف متفاوته اما بصورت کلی برای شروع کار و استفاده از فریمورک شما باید قبلا تجربه پیاده سازی چندین اپلیکیشن رو داشته باشید و با الگو های مرسوم و روند تولید نرم افزار کاملا آشنا باشید. بدونید چه چالش هایی توی کد نویسی بدون فریمورک وجود داره و سعی کنید خودتون اون چالش هارو برای یادگیری بیشتر رفع کنید. یک مثال از زبان پی اچ پی میزنم. توی پی اچ پی در صورتی که شما شی گرایی و ساختار ام وی سی رو بلد نباشید به هیچ وجه نمیتونید نحوه کار فریمورک هایی از جمله لاراول، سیمفونی، کدایگنایتر و سایر متوجه بشید. توی اکثر فریمورک های زبان های دیگه هم این قضیه صادقه. مثلا اگه شما شی گرایی توی جاوا رو بلدید نباشید نمیتونید ساختار و روند ساخت اپلیکیشن اندروید رو یاد بگیرید.&lt;/p&gt;

&lt;h2 id=&quot;تجربه-شخصی&quot;&gt;تجربه شخصی&lt;/h2&gt;

&lt;p&gt;من چند سال پیش زمانی که میخواستم اولین پروژه تجاری که سفارش گرفته بودم رو بنویسم، اصلا درکی از فریمورک نداشتم پس شروع کردم از صفر نوشتن همه بخش های وبسایت و پنل ادمین. نه تمپلیت انجینی استفاده میکردم نه کوئری بیلدر (چه برسه به اُ آر اِم). درواقع هر کوئری که میخواستم بزنم رو دستی مینوشتم. همینطور برای خودم ساختار درست کرده بودم که مثلا هر ماژول رو جدا داشته باشم که توسعه ام راحت تر باشه. تا حدی کمکم کرد این ساختار اما بازم همه چیز تو هم و بدون انسجام بود. این تجربه شد که دفعه بعد هرچیزی که لازم دارم رو توی کلاس بنویسم.&lt;/p&gt;

&lt;p&gt;پروژه بعدیم رو شروع کردم به نوشتن، برای امنیت سیستم کلاسی داشتم که متدی هایی برای اسکیپ کردن ورودی و … داشت. کلاسی داشتم که شامل متد هایی برای ایجاد، حذف، نوشتن، خوندن از فایل و آپلود کردن عکس بود. همینطور یک کلاس هم نوشته بودم که کار با تاریخ رو راحت تر کنه برام.&lt;/p&gt;

&lt;p&gt;توی این پروژه با شی گرایی خیلی خوب آشنا شدم و نتیجش تکرار کمتر کد ها، خوانایی بیشتر کد ها، و توسعه راحت تر نسبت به سیستم قبلی بود. اما باز هم مشکلات زیادی داشتم. مثلا برای اینکه قابلیت جدید اضافه کنم احتیاج داشتم تغییری توی ساختار دیتابیس بدم که این یعنی مکافات! باید میرفتم از دیتابیس بک اپ میگرفتم که نکنه یوقت خراب کاری کنم، بعد فیلد جدید رو اضافه میکردم، کد های جدید رو اضافه میکردم و وقتی همه چی اوکی بود دوباره یه بک آپ دیگه میگرفتم میبردم روی هاست اپلود میکردم. این بک آپ گرفتن و ریستور کردنا وقتی تعدادشون بالا میرفت دیوونم میکرد! خلاصه با مشکلات کلی آشنا شدم و خودم رو آماده کار با فریمورک میدونستم.&lt;/p&gt;

&lt;p&gt;اول از همه فریمورک کد ایگنایتر استفاده کردم که قابلیت های کمتری نسبت به بقیه فریمورک ها داشت، اما وقتی فهمیدم فریمورک ها چطور کنترلر و مدل و ویو رو از هم جدا میکنن و روند کارشون چطوریه، اومدم سمت لاراول. دیدم هر مشکلی که توی کد نویسی از صفر وجود داشت با استفاده از لاراول رفع میشه! مثلا همون بخش آپدیت کردن ساختار دیتابیس با یک فایل مایگریشن انجام  و برای اعمالش روی سرور فقط یه کامند باید زده میشد! به همین راحتی!&lt;/p&gt;

&lt;h2 id=&quot;نتیجه-گیری-نهایی&quot;&gt;نتیجه گیری نهایی&lt;/h2&gt;

&lt;p&gt;اگه از اون دست افرادی هستید که اعتقاد دارن باید همه چیز رو از صفر نوشت یا به قول معروف چرخ رو از نو اختراع کرد وگرنه برنامه نویس نیستیم، باید بهتون بگم که سخت در اشتباهید. برنامه نویس کار درست برنامه نویسیه که از تمام امکانات موجود استفاده کنه، اگر نقصی توی ابزار هایی که براش فراهم شده وجود داشت بتونه اون نقص هارو رفع کنه و بزاره تمام دنیا از نسخه اصلاح شدش استفاده کنن. کاری که روی گیت هاب و پروژه های اوپن سورس انجام میشه.&lt;/p&gt;

&lt;p&gt;درحال حاضر تعداد شرکت هایی که تمایل به استفاده از فریمورک برای پروژه هاشون دارن روز به روز در حال افزایشه و از اون سمت، شرکت هایی که اعتقاد به اختراع دوباره چرخ دارن در حال انقراض هستن. پس بهتون پیشنهاد میکنم توی زمینه کاریتون حتما اول پیش نیاز های کار با فریمورک رو یاد بگیرید و بعد به سمت استفاده و یادگیری یک فریمورک برید تا از بازار کار و رقابت عقب نمونید!&lt;/p&gt;</content><author><name>عرفان صحاف نژاد</name></author><category term="framework" /><category term="فریمورک" /><summary type="html">سلام! 😊 توی اولین پست پول ریکوئستم میخوام در رابطه با موضوع “استفاده کردن یا نکردن از فریمورک ها” صحبت کنم. توی گروه های تلگرامی سوالات زیادی درباره این موضوع پرسیده میشه برای همین تصمیم گرفتم این مطلب رو بنویسیم تا برای دوستانی که سردرگم هستن کمکی باشه. مقدمه چینی بسه، بریم ببینیم داستان از چه قراره!</summary></entry><entry><title type="html">پنهان کردن هدرهای پیش فرض مرورگر در پرینت صفحه وب</title><link href="http://pullrequest.ir/hide-page-header-in-print/" rel="alternate" type="text/html" title="پنهان کردن هدرهای پیش فرض مرورگر در پرینت صفحه وب" /><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><id>http://pullrequest.ir/hide-page-header-in-print</id><content type="html" xml:base="http://pullrequest.ir/hide-page-header-in-print/">&lt;p&gt;ممکنه نیاز داشته باشید صفحه وب رو با جاوااسرکیپت پرینت کنید. خود این تسک کار ساده ایه و با یه دستوری ساده مثل &lt;code class=&quot;highlighter-rouge&quot;&gt;window.print()&lt;/code&gt; انجام پذیره. اما یه مشکلی توی این پرینت وجود داره و اونم اینه که تنظیمات پیش فرض مرورگرها عنوان صفحه و تاریخ روز رو بالای صفحه ای که میخواید پرینت بگیرید وارد میکنه، مثل عکس زیر:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image.ibb.co/dpcbea/Screen_Shot_2017_07_16_at_2_33_16_PM.png&quot; alt=&quot;پرینت پیش فرض&quot; /&gt;&lt;/p&gt;

&lt;p&gt;اگر بخوایم اونو پنهان کنیم کافیه دستور زیر رو توی فایل سی اس اس پروژه قرار بدید تا از شر اون هدر خلاص بشید:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;یادتون-نره&quot;&gt;یادتون نره&lt;/h3&gt;
&lt;p&gt;اون قسمت &lt;code class=&quot;highlighter-rouge&quot;&gt;@media print&lt;/code&gt; رو از قلم نندازید. این کد توی سی اس اس اصلی ممکنه عوارض جانبی توی مرورگرهای قدیمی تر به بار بیاره و بهتره فقط توی حالت پرینت اعمال بشه.&lt;/p&gt;

&lt;p&gt;برای اطلاعات بیشتر در مورد سلکتور &lt;code class=&quot;highlighter-rouge&quot;&gt;@page&lt;/code&gt; میتونین به لینک زیر مراجعه کنید.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/@page&quot; target=&quot;blank&quot;&gt;MDN @page guide&lt;/a&gt;&lt;/p&gt;</content><author><name>فرزاد یوسف زاده</name></author><category term="javascript" /><category term="print" /><category term="css" /><category term="technique" /><category term="snippet" /><summary type="html">ممکنه نیاز داشته باشید صفحه وب رو با جاوااسرکیپت پرینت کنید. خود این تسک کار ساده ایه و با یه دستوری ساده مثل window.print() انجام پذیره. اما یه مشکلی توی این پرینت وجود داره و اونم اینه که تنظیمات پیش فرض مرورگرها عنوان صفحه و تاریخ روز رو بالای صفحه ای که میخواید پرینت بگیرید وارد میکنه، مثل عکس زیر:</summary></entry><entry><title type="html">آشنایی با Symfony</title><link href="http://pullrequest.ir/%D8%B4%D8%B1.%D8%B9-%DA%A9%D8%A7%D8%B1-%D8%A8%D8%A7-%D9%BE%DB%8C-%D8%A7%DA%86-%D9%BE%DB%8C-%D9%88-%D8%B3%DB%8C%D9%85%D9%81%D9%88%D9%86%DB%8C/" rel="alternate" type="text/html" title="آشنایی با Symfony" /><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><id>http://pullrequest.ir/%D8%B4%D8%B1.%D8%B9%20%DA%A9%D8%A7%D8%B1%20%D8%A8%D8%A7%20%D9%BE%DB%8C%E2%80%8C%D8%A7%DA%86%E2%80%8C%D9%BE%DB%8C%20%D9%88%20%D8%B3%DB%8C%D9%85%D9%81%D9%88%D9%86%DB%8C</id><content type="html" xml:base="http://pullrequest.ir/%D8%B4%D8%B1.%D8%B9-%DA%A9%D8%A7%D8%B1-%D8%A8%D8%A7-%D9%BE%DB%8C-%D8%A7%DA%86-%D9%BE%DB%8C-%D9%88-%D8%B3%DB%8C%D9%85%D9%81%D9%88%D9%86%DB%8C/">&lt;p&gt;بین تعدا زیادی از تکنولوژی‌های وب که وجود دارن، پی‌اچ‌پی تو طول زمانی تغییرات سریعی رو پشت سر گذاشته و الان به یک زبان بالغ تبدیل شده.&lt;/p&gt;

&lt;p&gt;پی‌اچ‌پی امروز هم برای وب‌سایت‌ها و وب‌اپلیکیشن‌ها کوچیک و همینطور بزرگ استفاده میشه و شاید یکی از دلایل محبوبیتش، سادگیش باشه.&lt;/p&gt;

&lt;p&gt;با توجه به اینکه هرروز پیچیدگی وب‌اپلیکیشن‌ها بیشتر میشه، برنامه‌نویس‌ها بیشتر به استفاده از فریم‌ورک‌ها رو آوردن و حتی برای پروژه‌های کوچیکشون هم از اونا استفاده می‌کنن. شاید با خودتون بگید «فریم‌ورک چیه؟». فریم‌ورک‌ها اساسا چیزی بجز یکسری توابع و ساختاربندی‌های کلاسی نیستن که از قبل آماده شدن و قابل استفاده هستن، که مهمترین ویژگیشون &lt;em&gt;اختراع نکردن چرخ از اول&lt;/em&gt; هست و این یعنی &lt;em&gt;صرفه‌جویی زمان&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;تقریبا تمام زبان‌های برنامه‌نویسی برای خودشون فریم‌ورک‌هایی رو دارن که هرکدوم با هدفی ساخته شدن. یسری از فریم‌ورک‌های محبوب پی‌اچ‌پی، Zend Framework, Cake PHP, Smarty, Laravel و Symfony هستند، و من خودم بشخصه طرفدار سیمفونی هستم و دلایلش رو هم میگم. در نهایت سعی میکنم برای کسانی که دوست دارن با سیمفونی آشنا بشن، توضیحی از نحوه نصب و راه‌اندازی و کار مختصر باهاش رو توضیح بدم.&lt;/p&gt;

&lt;h2 id=&quot;انعطافپذیری&quot;&gt;انعطاف‌پذیری&lt;/h2&gt;
&lt;p&gt;تو خیلی از پروژه‌هایی که کار کردم و دیدم، سیمفونی بهم ثابت کرد که خیلی زیاد انعطاف‌پذیره و یک انتخاب خوب برای کسب‌وکار. با قابلیت‌هایی مثل Dependency Injectorها یا Event Dispatcherها کاملا قابل تنظیم و شخصی‌سازی شده. سیمفونی یک ساختار OOP و SOA رو به صورت حرفه‌ای پیش برده که باعث شده برای کسایی که بخوان چه از ساختار Monolithic و چه از Micro Service بهره ببرن، گزینه‌ی مناسبی باشه، و این یعنی توسعه سریع، افزایش مقیاس پروژه و نگهداری راحت.&lt;/p&gt;

&lt;p&gt;برنامه‌نویس‌ها نیازی ندارن تا ویژگی‌های پایه و اساسی پروژه رو از اول بنویسن یا حتی بازنویسی کنن، مثل سرویس مدیرت فرم. سیمفونی برنامه‌نویس رو به چالش واقعی دعوت میکنه، محاسبات و مدیریت. بنظرم یکی از بهترین ویژگی‌های سیمفونی داشتن Web Debug Toolbar هست که حقیقتا یه دوست واقعی برای برنامه‌نویسه.&lt;/p&gt;

&lt;h2 id=&quot;ساختار-تیکه-تیکه-باندل&quot;&gt;ساختار تیکه تیکه! (باندل)&lt;/h2&gt;

&lt;p&gt;بنظرم یکی از ویژگی‌های بسیار مثبت سیمفونی، ساختار تیکه تیکش هست. یعنی سیمفونی از اجزای کوچکتر ساخته شده که هرکدومشون جداگانه قابل استفاده هستن، یک نمونش HTTP Foundation که خیلی زیاد تو لاراول استفاده شده. در واقع خود سیمفونی، یک تیکه کوچیک از این تیکه‌هاست که در حقیقت وظیفش جمع کردن همه‌ی تیکه‌ها (اسم درستشون باندل هست) و در کنار هم قراردادنشونه. برای همین سیمفونی رو میشه به دو حالت استفاده کرد:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;یک فریم‌ورک کامل: کل ابزارهای سیمفونی و یک عالمه ابزاری که برنامه‌نویس‌های دیگه نوشتن رو کنار هم و یکجا داشته باشید&lt;/li&gt;
  &lt;li&gt;میکرو فریم‌ورک‌ها: که درواقع شما توی پروژه‌ای که کار میکنید، بدون نصب سیمفونی، فقط از باندل‌های بدرد بخورش براش خودتون استفاده کنید، مثل FormBundle&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;twig&quot;&gt;TWIG!&lt;/h2&gt;

&lt;p&gt;الان تو دنیایی هستیم که کمتر کسی علاقه‌ای به نوشتن ظاهر سایت و HTML بصورت دستی داره، بخصوص زمانی که تعداد فایلها قراره زیاد بشن و شما مجبور بشید به ازای هر صفحه یه فایل جدید بسازید. توییگ، یه موتور ساخت قالب هست که بهتون کمک خیلی زیادی توی طراحی میکنه. مثلا شما میتونید یک فایل html بسازید و داخلش از توییگ استفاده کنید و فقط متغیرها رو بهش پاس بدید. و اون برای شما به سادگی و سریع رندر کنه.
سیمفونی به صورت پیشفرض از توییگ پشتیبانی میکنه و خیلی از زمان طراحی شما کم میکنه.&lt;/p&gt;

&lt;h2 id=&quot;داکترین-doctrine&quot;&gt;داکترین (Doctrine)&lt;/h2&gt;
&lt;p&gt;داکترین در واقع یک سری کتابخونه برای php هست که وظیفش ایجاد یک لایه‌ی اضافی برای ارتباط برنامه‌نویس با دیتابیسه، در حقیقت به جای اینکه برنامه‌نویس مجبور بشه کدهای sql رو دستی وارد کنه، با نصب داکترین، فقط به کدهای php بسنده میکنه و داکترین تمام کارهارو براش انجام میده.&lt;/p&gt;

&lt;p&gt;داکترین تبدیل به یک پروژه بالغ شده و بنظرم تمام امکانات مورد نیاز برنامه‌نویس رو در اختیارش قرار میده. خود داکترین شاخه‌های زیرمجموعه داره که مهمترین و پرمصرف‌ترینش Doctrin ORM هست که وظیفش بصورت ساده و خلاصه، تبدیل کلاس‌های php به مدل‌های دیتابیسی هست.&lt;/p&gt;

&lt;p&gt;سیمفونی بطور پیشفرض از Doctrine ORM پشتیبانی میکنه و نیازی نیست شما اون رو کانفیگ کنید.&lt;/p&gt;

&lt;h2 id=&quot;تست-راحت&quot;&gt;تست راحت&lt;/h2&gt;
&lt;p&gt;بنظرم سیمفونی با ایده‌ی «تستینگ در اولویت» پیش رفته. Unit Testingها با استفاده از PHPUnit خیلی خوب از کدها جدا شدن مدیریتشون خیلی راحت شده. با یه کمک خیلی زیاد از PHPUnit این امکان برای برنامه‌نویس وجود داره تا به سادگی درخواست‌های http رو بازسازی، آزمایش و تست کنه بدون اینکه مجبور باشه کد زیادی رو با ابزار تست بزنه.
در واقع این امکان سیمفونی حتی زمان زیادی رو هم توی تست حفظ میکنه و سرعت عمل رو بالا میبره. در مجموع اکوسیستم سیمفونی روی تستینگ و کیفیت بالای اون خیلی تمرکز داشته و موارد خوبی رو فراهم کرده.&lt;/p&gt;

&lt;h2 id=&quot;دیباگ-مثل-آب-خوردن&quot;&gt;دیباگ مثل آب خوردن&lt;/h2&gt;
&lt;p&gt;محبوبترین ویژگی سیمفونی، Web Debug Tool هست که اطلاعات کاملی و دقیقی راجع به وضعیت فعلی درخواست‌ها، ترنسپایلر‌ها و غیره میده و حتی امکان تست سرعت رندر هم داره. Symfony Profiler همون ابزار دیباگینگ هست که در مورد تمام اتفاقات پروژه تو هر مرحله گزارش کامل و دقیق میده.&lt;/p&gt;

&lt;h1 id=&quot;نصب-سیمفونی&quot;&gt;نصب سیمفونی&lt;/h1&gt;
&lt;p&gt;حتما براتون سوال شده که چطور میشه سیمفونی رو نصب و راه‌اندازی کرد. برای اینکار روش‌های مختلی وجود داره، اما بهترین روش که من هم ازش استفاده میکردم و راضی بودم، استفاده از نصاب خود سیمفونی هست که برای راه‌اندازیش میتونید به شکل زیر عمل کنید:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;دریافت فایل نصاب&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;برای لینوکس و مک&lt;/em&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo curl -LsS https://symfony.com/installer -o /usr/bin/symfony
 sudo chmod a+x /usr/bin/symfony
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;em&gt;برای ویندوز&lt;/em&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C:\&amp;gt; php -r &quot;readfile('https://symfony.com/installer');&quot; &amp;gt; symfony
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;استفاده از نصاب&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; symfony new helloWorld lts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;حتما مطمئن باشد که از PHP Phar Extension استفاده میکنید!&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;نصب Composer
کامپوزر، در حقیقت یک Package Manager هست که پکیج‌هایی که تو ریپازیتوری کامپوزر وجود دارن رو براتون پیدا و بهترین رو از لحاظ مطابقت با ورژن‌های شما نصب میکنه.
کامپوزر رو میتونید به سادگی از ریپازیتوری‌های توزیع لینوکستون پیدا کنید. مثلا
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo packman -S composer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;یا&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install composer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;راه اندازی سرور و ادامه کد زدن&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;دایرکتوریتون رو به فولدر helloWorld تغییر بدبد&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd helloWorld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;و سرور داخلی سیمفونی رو اجرا کنید:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console server:run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;گام-به-گام-با-هم-پیش-بریم&quot;&gt;گام به گام با هم پیش بریم&lt;/h1&gt;

&lt;p&gt;بیاید باهم یه وب‌سایت ساده بنویسیم. فکر میکنم یه وبلاگ میتونه گزینه مناسبی برای شروع باشه. پس اگر هنوز نصاب سیمفونی و کامپوزر رو نصب نکردید، برگردید عقب و انجامشون بدید تا در ادامه مشکلی نداشته باشید.&lt;/p&gt;

&lt;h2 id=&quot;قدم-اول-راه-اندازی-پروژه&quot;&gt;قدم اول، راه اندازی پروژه&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;symfony new MyBlog lts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;پس از اجرا، باید همچین پاسخی رو دریافت کنید:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Downloading Symfony...

    5.4 MiB/5.4 MiB ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  100%

 Preparing project...

   Symfony 2.8.24 was successfully installed. Now you can:

    * Change your current directory to ~/MyBlog

    * Configure your application in app/config/parameters.yml file.

    * Run your application:
        1. Execute the php app/console server:start command.
        2. Browse to the http://localhost:8000 URL.

    * Read the documentation at http://symfony.com/doc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;و در نهایت دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;composer install&lt;/code&gt; رو داخل فولدر MyBlog اجرا کنید.&lt;/p&gt;

&lt;p&gt;حالا IDE یا ادیتورتون رو باز کنید و پروژه رو داخلش بیارید بالا.&lt;/p&gt;

&lt;h3 id=&quot;تنظیمات-دیتابیس&quot;&gt;تنظیمات دیتابیس&lt;/h3&gt;

&lt;p&gt;تمام تنظیمات پروژه، داخل فولدر &lt;code class=&quot;highlighter-rouge&quot;&gt;app/config&lt;/code&gt; قرار میگیرن. فولدر &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; موظف به نگهداری از تمام منابع اپلیکیشن هست، مثل قالب‌های توییگ، لاگ‌ها و تنظیمات و هسته اپلیکیشن.&lt;/p&gt;

&lt;p&gt;فایلهایی که داخل پوشه &lt;code class=&quot;highlighter-rouge&quot;&gt;app/config&lt;/code&gt; هستن، معمولا با پسوند &lt;code class=&quot;highlighter-rouge&quot;&gt;.yml&lt;/code&gt; یا &lt;code class=&quot;highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; قرار میگیرن که میتونم بگم از لحاظ کاربری مشابه &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; هستن.&lt;/p&gt;

&lt;p&gt;حالا فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;app/config/parameters.yml&lt;/code&gt; رو باز کنید. با همچین ساختاری مواجه میشید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This file is auto-generated during the composer install
parameters:
    database_host: 127.0.0.1
    database_port: null
    database_name: symfony
    database_user: root
    database_password: null
    mailer_transport: smtp
    mailer_host: 127.0.0.1
    mailer_user: null
    mailer_password: null
    secret: 90830183902924603f797e4b794ff7e8353e43e9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;تیکه اول درواقع تنظیمات عمومی اپ برای ارتباط با دیتابیس هست. این تنظیمات رو به:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;database_name: MyBlog #یا هر اسم دیگه‌ای که برای دیتابیس دوست دارید
database_user: root #یوزرنیم که باهاش به دیتابیس وصل میشید
database_password: null #پسورد دیتابیستون...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;تغییر بدید. من در حالت عادی با MySql کار میکنم، اما سیمفونی گزینه‌های دیگه‌ای هم مثل MongoDb و دیتابیس‌های دیگه داره و از اونا پشتیبانی میکنه.&lt;/p&gt;

&lt;h4 id=&quot;ساخت-دیتابیس&quot;&gt;ساخت دیتابیس&lt;/h4&gt;
&lt;p&gt;یکی از گزینه‌های خیلی خوب سیمفونی که من دوست دارم، کنسولش هست. که خیلی از کارهارو برای شما انجام میده. میتونید اطلاعات بیشتری راجع بهش رو صرفا با تایپ &lt;code class=&quot;highlighter-rouge&quot;&gt;app/console&lt;/code&gt; بدست بیارید.&lt;/p&gt;

&lt;p&gt;الان فقط ساخت دیتابیس برامون کافیه تا بریم مراحل بعدی:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console doctrine:database:create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;و پاسخش:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Created database `MyBlog` for connection named default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حالا چک کنیم که تا اینجا همه‌چیز خوب پیشرفته:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console server:run

[OK] Server running on http://127.0.0.1:8000

// Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;میتونید صفحه رو باز کنید و چک کنید. نوار سیاه پایین صفحه، همون Web Debug Tool هست که گفته بودم. بعد از اینکه مطمئن شدید اوضاع خوبه، پروسه رو قطع میکنیم و میریم گام بعدی.&lt;/p&gt;

&lt;h2 id=&quot;ساخت-یک-باندل-برای-مدیریت-وبلاگ&quot;&gt;ساخت یک باندل برای مدیریت وبلاگ&lt;/h2&gt;

&lt;p&gt;یک نکته مهم، از اونجایی که سیمفونی ساختار تیکه تیکه داره (Bundle) شما میتونید هر قسمتی از سایت رو بر اساس ساختار خودتون به یک باندل تبدیل کنید. مثلا فرض میکنیم که وبلاگ سایت، برای خودش یه تیکه جداست، یعنی میتونیم خیلی راحت از پروژه حذفش کنیم و دیگه کاربرا بلاگی نبینن. برای اینکار، یه باندل جدید میسازیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console generate:bundle

                                            
  Welcome to the Symfony bundle generator!  
                                            

Are you planning on sharing this bundle across multiple applications? [no]: 

Your application code must be written in bundles. This command helps
you generate them easily.

Give your bundle a descriptive name, like BlogBundle.
Bundle name: MyBlogBundle

Bundles are usually generated into the src/ directory. Unless you're
doing something custom, hit enter to keep this default!

Target Directory [src/]: 

What format do you want to use for your generated configuration?

Configuration format (annotation, yml, xml, php) [annotation]: 

                     
  Bundle generation  
                     

&amp;gt; Generating a sample bundle skeleton into app/../src/MyBlogBundle
  created ./app/../src/MyBlogBundle/
  created ./app/../src/MyBlogBundle/MyBlogBundle.php
  created ./app/../src/MyBlogBundle/Controller/
  created ./app/../src/MyBlogBundle/Controller/DefaultController.php
  created ./app/../tests/MyBlogBundle/Controller/
  created ./app/../tests/MyBlogBundle/Controller/DefaultControllerTest.php
  created ./app/../src/MyBlogBundle/Resources/views/Default/
  created ./app/../src/MyBlogBundle/Resources/views/Default/index.html.twig
  created ./app/../src/MyBlogBundle/Resources/config/
  created ./app/../src/MyBlogBundle/Resources/config/services.yml
&amp;gt; Checking that the bundle is autoloaded
&amp;gt; Enabling the bundle inside app/AppKernel.php
  updated ./app/AppKernel.php
&amp;gt; Importing the bundle's routes from the app/config/routing.yml file
  updated ./app/config/routing.yml
&amp;gt; Importing the bundle's services.yml from the app/config/config.yml file
  updated ./app/config/config.yml

                                         
  Everything is OK! Now get to work :).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;سوال اول اینه:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Are you planning on sharing this bundle across multiple applications? [no]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;که اگر جوابتون &lt;code class=&quot;highlighter-rouge&quot;&gt;yes&lt;/code&gt; باشه، تمام فایلهای باندل، مثل قالب‌ها، تنظیمات و غیره رو توی خود فولدر باندل میریزه که شما بتونید راحت جداش کنید. در غیر این صورت، قالب‌ها داخل فولدر &lt;code class=&quot;highlighter-rouge&quot;&gt;app/Resources/views&lt;/code&gt; ریخته میشن. (که عملا جدا کردنشون کار سختی میشه…)&lt;/p&gt;

&lt;p&gt;برای ادامه آموزشمون، میتونید این گزینه رو همینطور رها کنید (اینتر بزنید) و بریم سراغ سوال بعدی:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bundle name: MyBlogBundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;این اسم، ارتباطی با اسم پروژه نداره، یهو به ذهنم رسید، شما میتونید از &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogBundle&lt;/code&gt; یا &lt;code class=&quot;highlighter-rouge&quot;&gt;HaminjuriBundle&lt;/code&gt; استفاده کنید… مهم اینه که حتما کلمه &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle&lt;/code&gt; به آخرش، به صورت CamelCase اضافه بشه. سوال بعدی این خواهد بود:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Target Directory [src/]:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;تمام باندل‌های سایت شما (مگر زمانی که خودتون کانفیگ کنید) داخل فولدر &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; ریخته میشن، درواقع شما ۹۹٪ زمانتون رو تو این فولدر صرف میکنید. ماهم این گزینه رو به حال خودش رها میکنیم.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Configuration format (annotation, yml, xml, php) [annotation]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;نوع تنظیماتی که باندل قرار داشته باشه چطوره، میتونید از هر نوعی که گفته استفاده کنید ولی من annotation رو ترجیح میدم چون خیلی راحت میشه تغییرش داد و مدیریتش خیلی آسونتر هست. پس فقط اینتر رو میزنم و میرم سراغ گام بعدی!&lt;/p&gt;

&lt;h2 id=&quot;ساخت-یک-مدل-ساده-از-پست-وبلاگ&quot;&gt;ساخت یک مدل ساده از پست وبلاگ&lt;/h2&gt;

&lt;p&gt;خب، تا اینجا خوب پیشرفتیم. فرض میکنیم کاربرای ما، نیازی به مدلسازی پیچیده‌ای ندارن و در حد ساده‌ی آموزش ما براشون کافیه. یک پست وبلاگ چه چیزا‌هایی احتیاج داره؟&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;عنوان&lt;/em&gt; (title) از نوع رشته‌ای (string) که حتما باید وارد بشه (not nullable) و نباید تکراری باشه (unique)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;متن نوشته&lt;/em&gt; (content) از نوع متنی (text) که حتما باید وارد بشه (not nullable)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;تاریخ ساخت&lt;/em&gt; (createdAt) از نوع تاریخ (data) که حتما باید وارد بشه (not nullable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;دوباره میریم سراغ کنسول:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console doctrine:generate:entity

                                             
  Welcome to the Doctrine2 entity generator  
                                             


This command helps you generate Doctrine2 entities.

First, you need to give the entity name you want to generate.
You must use the shortcut notation like AcmeBlogBundle:Post.

The Entity shortcut name: BlogBundle:Post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;اینجا بهش میگیم که این انتیتی (entity)، یا همون مدلمون، مربوط به کدوم باندل هست. اسم باندل که باهم درست کردیم دو نقطه اسم انتیتی که میشه پست…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Configuration format (yml, xml, php, or annotation) [annotation]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;همچنان با انوتیشن پیش میریم. از اینجا به بعد ازتون میخواد که پراپرتی‌های مدل رو مشخص کنید. زمانی که کارتون تموم شد، میتونید اینتر رو بزنید و ادامه رو به کنسول بسپارید. پس پیش میریم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;New field name (press &amp;lt;return&amp;gt; to stop adding fields): title
Field type [string]: 
Field length [255]: 
Is nullable [false]: 
Unique [false]: true

New field name (press &amp;lt;return&amp;gt; to stop adding fields): content
Field type [string]: text
Is nullable [false]: 
Unique [false]: 

New field name (press &amp;lt;return&amp;gt; to stop adding fields): createdAt
Field type [string]: date
Is nullable [false]: 
Unique [false]: 

New field name (press &amp;lt;return&amp;gt; to stop adding fields): 

                     
  Entity generation  
                     

  created ./src/BlogBundle/Entity/
  created ./src/BlogBundle/Entity/Post.php
&amp;gt; Generating entity class src/BlogBundle/Entity/Post.php: OK!
&amp;gt; Generating repository class src/BlogBundle/Repository/PostRepository.php: OK!

                                         
  Everything is OK! Now get to work :).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حالا اگر برید داخل &lt;code class=&quot;highlighter-rouge&quot;&gt;src/BlogBundle/Entity&lt;/code&gt; متوجه میشید که فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;Post.php&lt;/code&gt; براتون ساخته شده. این فایل در واقع یه کلاس ساده PHP هست که صرفا پراپرتی‌های مدل رو نگه‌داری میکنه. در واقع این همون مدل پست ماست که میتونید بعدا خیلی راحت تغییرش بدید.&lt;/p&gt;

&lt;p&gt;ضمنا همزمان با ساخت این مدل، یک فایل هم داخل &lt;code class=&quot;highlighter-rouge&quot;&gt;src/BlogBundle/Repository&lt;/code&gt; به نام &lt;code class=&quot;highlighter-rouge&quot;&gt;PostRepository.php&lt;/code&gt; ساخته شده، که در واقع وظیفه اصلیش اینه:&lt;/p&gt;

&lt;p&gt;یک جاهایی از پروژه شما نیاز پیدا میکنید تا مثلا یک رکورد خاص رو از دیتابیس، با محاسبات خاصی دریافت کنید. اینجا میتونید تمام دستورات لازم رو بنویسید تا همه‌جا بشه به سادگی ازشون استفاده کرد.&lt;/p&gt;

&lt;p&gt;حالا که مدل ساخته شد، اون رو به دیتابیس منتقل میکنیم تا ساختار دیتابیس با مدل‌های ما یکی بشه:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console doctrine:schema:update --force
Updating database schema...
Database schema updated successfully! &quot;1&quot; queries were executed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;چرا از آرگومان &lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt; استفاده کردیم؟ یک دلیلش اینه که مطمئن باشیم داریم درست پیش میریم. پیش میاد زمانی که احتمالا دستور رو اشتباه وارد کنیم و باعث بشیم تا دیتابیس بهم بریزه. مورد بعدی اینکه شما میتونید از آرگومان &lt;code class=&quot;highlighter-rouge&quot;&gt;--dump-sql&lt;/code&gt; هم استفاده کنید تا ببینید دقیقا چه دستوری به SQL اجرا میشه.&lt;/p&gt;

&lt;h2 id=&quot;ساخت-فرم-برای-مدیریت-پستها&quot;&gt;ساخت فرم برای مدیریت پست‌ها&lt;/h2&gt;

&lt;p&gt;تا اینجا خوب پیشرفتیم. حالا باید این امکان رو برای کاربر فراهم کنیم، تا بتونه پست‌ها رو کراد (CRUD = Create, Read, Update and Delete) کنه. خوبی سیمفونی اینه که تقریبا تمام این کارها رو با کنسول میشه انجام داد. پس:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console doctrine:generate:crud

                                           
  Welcome to the Doctrine2 CRUD generator  
                                           


This command helps you generate CRUD controllers and templates.

First, give the name of the existing entity for which you want to generate a CRUD
(use the shortcut notation like AcmeBlogBundle:Post)

The Entity shortcut name: BlogBundle:Post

By default, the generator creates two actions: list and show.
You can also ask it to generate &quot;write&quot; actions: new, update, and delete.

Do you want to generate the &quot;write&quot; actions [no]? yes

Determine the format to use for the generated CRUD.

Configuration format (yml, xml, php, or annotation) [annotation]: 

Determine the routes prefix (all the routes will be &quot;mounted&quot; under this
prefix: /prefix/, /prefix/new, ...).

Routes prefix [/post]: /blog

                             
  Summary before generation  
                             

You are going to generate a CRUD controller for &quot;BlogBundle:Post&quot;
using the &quot;annotation&quot; format.

Do you confirm generation [yes]? 

                   
  CRUD generation  
                   

  created ./src/BlogBundle/Controller//PostController.php
  created ./app/Resources/views/post/
  created ./app/Resources/views/post/index.html.twig
  created ./app/Resources/views/post/show.html.twig
  created ./app/Resources/views/post/new.html.twig
  created ./app/Resources/views/post/edit.html.twig
  created ./src/BlogBundle/Tests/Controller/
  created ./src/BlogBundle/Tests/Controller//PostControllerTest.php
Generating the CRUD code: OK
  created ./src/BlogBundle/Form/
  created ./src/BlogBundle/Form/PostType.php
Generating the Form code: OK
Updating the routing: OK

                                         
  Everything is OK! Now get to work :).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;بذارید مرحله به مرحله توضیح بدم. اول دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;app/console doctrine:generate:crud&lt;/code&gt; رو زدم. بعد ازم پرسید که برای چه انتیتی میخوام کراد بسازم و من هم &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogBundle:Post&lt;/code&gt; رو وارد کردم. بعد ازم پرسید که پیشوند مسیرم برای کاربر چیه، در واقع کاربر از چه مسیری توی سایت میتونه به این عملیات‌ها دسترسی داشته باشه. خودش بصورت پیشفرض، اسم انتیتی (Post) رو در نظر گرفته بود و من به &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog&lt;/code&gt; تغییرش دادم. و در نهایت پرسید که آیا مطمئن هستم؟ و منم مطمئنم…&lt;/p&gt;

&lt;p&gt;خب، حالا یه تست کنیم ببینیم تا اینجا چطور پیشرفتیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console cache:clear
app/console server:run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;از این آدرس استفاده کنید تا بتونید بهتر ببینید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost:8000/app_dev.php/blog/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app_dev.php&lt;/code&gt; در واقع محیط دیباگ رو فراهم میکنه. اگر واردش نکنید، سایت اصلی بدون گزینه‌های دیباگ و پولیش شده جلوتون قرار میگیره.&lt;/p&gt;

&lt;p&gt;تا اینجا عالی بود. پیشنهاد میکنم یکم با این صفحه کار کنید و چندتا پست نمونه بسازید، پاکشون کنید و تغییرشون بدید. چقدر راحت شد همه‌چیز.&lt;/p&gt;

&lt;p&gt;ولی ظاهرش اصلا قشنگ نیست… قدم بعدیمون، میریم سراغ یکم طراحی…&lt;/p&gt;

&lt;h2 id=&quot;یکم-کار-با-قالبها&quot;&gt;یکم کار با قالب‌ها&lt;/h2&gt;
&lt;p&gt;تمام قالب‌های مربوط به کراد، با توجه به اینکه قرار نیست ما این باندل رو جدا کنیم، تو فولدر &lt;code class=&quot;highlighter-rouge&quot;&gt;app/Resources/views/post&lt;/code&gt; قرار گرفتن. از اسم فایل‌ها مشخصه که هر کدوم چه وظیفه‌ای به عهده دارن. پسوندشون هم &lt;code class=&quot;highlighter-rouge&quot;&gt;.html.twig&lt;/code&gt; هست که درواقع یک فایل توییگه که باهاش به شکل فایل html برخورد میشه.&lt;/p&gt;

&lt;p&gt;### &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html.twig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;اگر به فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;src/BlogBundle/Controller/PostController.php&lt;/code&gt; نگاه کنید، که بعد از اجرای دستور &lt;code class=&quot;highlighter-rouge&quot;&gt;doctrine:generate:crud&lt;/code&gt; ایجاد شده، متوجه میشید که تمام عملیات کراد اینجا انجام میشه.&lt;/p&gt;

&lt;p&gt;کنترلرها در واقع کلاس‌هایی هستن که وظیفشون مدیریت فعالیت‌های قسمت‌های مختلف باندل یا مسیرهای اوناست. اینو رو ببینید:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
* Lists all post entities.
*
* @Route(&quot;/&quot;, name=&quot;blog_index&quot;)
* @Method(&quot;GET&quot;)
*/
public function indexAction()
{
    $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

    $posts = $em-&amp;gt;getRepository('BlogBundle:Post')-&amp;gt;findAll();

    return $this-&amp;gt;render('post/index.html.twig', array(
        'posts' =&amp;gt; $posts,
    ));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;چون تعریف کردیم که تظیمات رو با انوتیشن انجام میدیم، تمام تعاریف اکشن‌ها (یا همون تیکه‌های کوچیک که وظیفه مدیریت قسمت‌های مختلف باندل رو دارن وکنترلر اونارو یجا جمع کرده) بالاشون، انوتیت میشن.&lt;/p&gt;

&lt;p&gt;مثلا اینجا به &lt;code class=&quot;highlighter-rouge&quot;&gt;@Route&lt;/code&gt; دقت کنید، آرگومان اولش &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; هست، یعنی &lt;code class=&quot;highlighter-rouge&quot;&gt;مسیرباندل/مسیر کنترلر/مسیر اکشن&lt;/code&gt; که اینجا برای ما میشه &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog/&lt;/code&gt;. دقت کنید که خود باندل بلاگ، مسیری رو نداره، و ما زمان ساخت فرم گفتیم که پیشوند مسیر رو از &lt;code class=&quot;highlighter-rouge&quot;&gt;/post&lt;/code&gt; به &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog&lt;/code&gt; تغییر بده. اگر دوست داشتید که مسیر باندل رو هم عوض کنید، فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;app/config/routing.yml&lt;/code&gt; رو باز کنید و &lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt; باندل رو از &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; به هرچی که دوست دارید، مثلا &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; تغییر بدید. در نتیجه این تغییر، کاربر شما برای دریافت لیست پست‌ها باید به آدرس &lt;code class=&quot;highlighter-rouge&quot;&gt;hello/blog/&lt;/code&gt; مراجعه کنه.&lt;/p&gt;

&lt;p&gt;خب، برمیگردیم به خود کد و اون رو مرور میکنیم. &lt;code class=&quot;highlighter-rouge&quot;&gt;$em&lt;/code&gt; درواقع انتیتی منیجر داکترین تعریف شده. وقتی ما این کلاس رو از &lt;code class=&quot;highlighter-rouge&quot;&gt;Symfony\Bundle\FrameworkBundle\Controller\Controller&lt;/code&gt; اکستند کردیم، امکاناتی مثل &lt;code class=&quot;highlighter-rouge&quot;&gt;getDoctrine()&lt;/code&gt; به &lt;code class=&quot;highlighter-rouge&quot;&gt;$this&lt;/code&gt; اضافه شده.&lt;/p&gt;

&lt;p&gt;بعد اومده و لیست تمام رکورد‌های موجود توی جدول پست رو گرفته، و در نهایت فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;app/Resources/views/post/index.html.twig&lt;/code&gt; رو رندر کرده و پست‌ها رو پاس داده بهش.&lt;/p&gt;

&lt;p&gt;حالا بریم سراغ فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;app/Resources/views/post/index.html.twig&lt;/code&gt;. تو خط اولش متوجه میشیم که &lt;img src=&quot;https://image.ibb.co/bRRfx5/Screenshot_from_2017_07_24_19_06_32.png&quot; alt=&quot;&quot; /&gt; اجرا میشه، یعنی، این فایل ما یک بخشی از فایل اصلی &lt;code class=&quot;highlighter-rouge&quot;&gt;base.html.twig&lt;/code&gt; هست که تو پوشه &lt;code class=&quot;highlighter-rouge&quot;&gt;app/Resources/views/base.html.twig&lt;/code&gt; قرار گرفته.&lt;/p&gt;

&lt;p&gt;شما با تغییر دادن این فایل میتونید ظاهر سایت رو عوض کنید. مثلا من بالای &lt;code class=&quot;highlighter-rouge&quot;&gt;base.html.twig&lt;/code&gt; میخوام اسم سایت رو اضافه کنم. فایلش رو باز میکنم و:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://preview.ibb.co/eiwPPk/Screenshot_from_2017_07_24_19_09_41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;حالا بالای صفحه یه هدر دارم و پایین هم یه فوتر. یه استایل ساده رو داخل فولدر &lt;code class=&quot;highlighter-rouge&quot;&gt;web/style.css&lt;/code&gt; میذارم و اینا رو داخلش اضافه میکنم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;body {
    font-family: sans;
}

.header {
    margin: 15px;
    background-color: #eee;
}

.footer {
    margin: 15px;
    border: 1px solid #ccc;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;و در نهایت به &lt;code class=&quot;highlighter-rouge&quot;&gt;base.html.twig&lt;/code&gt; میگم که این فایل رو بیاره و تو صفحه‌ها نمایش بده:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://preview.ibb.co/dArkVQ/Screenshot_from_2017_07_24_19_11_36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;دستورات توییگ با &lt;code class=&quot;highlighter-rouge&quot;&gt;{ { } }&lt;/code&gt; (بدون فاصله) اجرا میشن. و &lt;code class=&quot;highlighter-rouge&quot;&gt;asset('...')&lt;/code&gt; میره و هرچیزی که داخل فولدر &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; بود رو برای شما با اون اسم میاره. دیگه نیازی نیست نگران آدرس فایل‌ها باشید!&lt;/p&gt;

&lt;p&gt;حالا میخوام جدولی که توی فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;app/Resources/views/post/index.html.twig&lt;/code&gt; بود رو یکم قشنگتر کنم، یه فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;table.css&lt;/code&gt; توی &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; میسازم و اینارو داخل مینویسم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;table, td, th {    
    border: 1px solid #ddd;
    text-align: left;
}

table {
    border-collapse: collapse;
    width: 100%;
}

th, td {
    padding: 15px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;و بعد، میخوام هرموقع که کاربر صفحه ایندکس پست‌ها (&lt;code class=&quot;highlighter-rouge&quot;&gt;indexAction&lt;/code&gt;) رو باز میکنه، این استایل نمایش داده بشه. برای اینکار، فایل &lt;code class=&quot;highlighter-rouge&quot;&gt;post/index.html.twig&lt;/code&gt; رو باز میکنم و:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://preview.ibb.co/iYhaVQ/Screenshot_from_2017_07_24_19_12_57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;کارمون تموم شد. یه تست میکنیم:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/console cache:clear
app/console server:run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;حالا صفحه پست‌ها رو باز کنید و ببینید چه اتفاقی افتاد…&lt;/p&gt;

&lt;p&gt;خب ما باهم تونستیم یه وب‌سایت خیلی ساده رو درست کنیم و تقریبا هیچ کدی نزنیم. سیمفونی هنوز مونده و خیلی خیلی جا برای یادگیری داره، اما بنظرم شروع خوبی داشتیم و قطعا خودتون میتونید از اینجا به بعد رو تنهایی پیش برید.&lt;/p&gt;

&lt;p&gt;پیشنهاد میکنم حتما سری به سایت &lt;a href=&quot;http://symfony.com/&quot;&gt;سیمفونی&lt;/a&gt;، سایت &lt;a href=&quot;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/&quot;&gt;آموزش داکترین&lt;/a&gt; و &lt;a href=&quot;https://twig.symfony.com/doc/2.x/&quot;&gt;توییگ&lt;/a&gt; بزنید تا باهاشون بیشتر آشنا بشید.&lt;/p&gt;

&lt;p&gt;با آرزوی موفقیت روزافزون برای شما&lt;/p&gt;</content><author><name>آیین سعیدی</name></author><category term="PHP" /><category term="Symofny" /><category term="Beginning" /><summary type="html">بین تعدا زیادی از تکنولوژی‌های وب که وجود دارن، پی‌اچ‌پی تو طول زمانی تغییرات سریعی رو پشت سر گذاشته و الان به یک زبان بالغ تبدیل شده.</summary></entry></feed>